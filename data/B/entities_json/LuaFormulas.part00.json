{
	"def": [
		{
			"memberName": "LuaFormula",
			"packageName": "com.ankamagames.dofus.datacenter.misc",
			"fields": [
				{
					"name": "id",
					"type": -1
				},
				{
					"name": "formulaName",
					"type": -3
				},
				{
					"name": "luaFormula",
					"type": -3
				}
			]
		}
	],
	"data": [
		{
			"id": 2,
			"formulaName": "monster_xp",
			"luaFormula": "function params()\r\n   return {\"monster_level\", \"monster_is_boss\"}\r\nend\r\n\r\nfunction getEXP(level, boss)\r\n  if level < 200 then\r\n    if boss then\r\n        return math.floor(((level * 100 + math.pow(level, 1.75) * 2) * level * 0.1) * 1.2 * 0.5)\r\n     else\r\n        return level * 100 + math.pow(level, 2) * 2\r\n     end\r\n  else\r\n    if boss then\r\n      return math.floor(500000*(1+(level-200)/100))\r\n    else\r\n      return math.floor(100000*(1+(level-200)/100))\r\n    end\r\n  end\r\nend\r\n\r\nfunction main()\r\n  return getEXP(monster_level, monster_is_boss)\r\nend"
		},
		{
			"id": 3,
			"formulaName": "monster_pm",
			"luaFormula": "function params()\r\n   return {\"monster_level\", \"monster_grade_hidden_level\", \"stat_base\", \"monster_grade_level\"}\r\nend\r\n\r\nfunction main()\r\n   --By pass for monsters with 0 pm remains 0 pm : no scale but remains boostable, -1pm remains -1pm : no scale, no boostable)\r\n   if stat_base == -1 then\r\n      return stat_base\r\n   end\r\n   local original_lvl;\r\n\r\n   if monster_grade_hidden_level == 0 then\r\n      original_lvl = monster_grade_level\r\n   else\r\n      original_lvl = monster_grade_hidden_level\r\n   end\r\n\r\n   return stat_base + math.floor(math.pow((monster_level - original_lvl) / 70 , 0.77))\r\n   -- return stat_base + math.floor(monster_level/100)\r\nend"
		},
		{
			"id": 4,
			"formulaName": "monster_life",
			"luaFormula": "local monsterLifeCoef = 1.625\r\nlocal monsterLifeSignificativeNumbers = 2\t\r\n\r\nfunction params()\r\n   return {\"monster_level\", \"stat_ratio\"}\r\nend\r\n\r\nfunction roundToNearest(n, decimalCount)\r\n   decimalCount = decimalCount or 0\r\n   local offset = math.pow(10, decimalCount)\r\n   local res = n * offset\r\n   if res % 1 >= 0.5 then\r\n      res = math.ceil(res)\r\n   else\r\n     res = math.floor(res)\r\n   end\r\n   return res / offset\r\nend\r\n\r\nfunction roundToSignificantFigures(num, n)\r\n   if num == 0 then\r\n      return 0\r\n   end\r\n   local d = math.ceil(math.log(math.abs(num)) / math.log(10))\r\n   if d <= n then\r\n      return num\r\n   end\r\n   local power = math.floor(d - n)\r\n   local magnitude = math.floor(math.pow(10, power))\r\n   return roundToNearest(num / magnitude) * magnitude\r\nend\r\n\r\nfunction main()\r\n   if stat_ratio == nil then\r\n      return 0\r\n   end\r\n\r\n   return math.max(1, roundToSignificantFigures(math.floor(stat_ratio * math.pow(monster_level, monsterLifeCoef)), monsterLifeSignificativeNumbers))\r\nend"
		},
		{
			"id": 5,
			"formulaName": "monster_stat",
			"luaFormula": "function params()\r\n   return {\"monster_level\", \"stat_ratio\", \"stat_base\"}\r\nend\r\n\r\nfunction main()\r\n   if stat_ratio == nil then\r\n      return 0\r\n   end\r\n\r\n   return math.floor(7 + (math.pow(monster_level, 1.26) * stat_ratio))\r\nend"
		},
		{
			"id": 12,
			"formulaName": "monster_po",
			"luaFormula": "function params()\r\n   return {\"monster_level\", \"monster_grade_hidden_level\", \"stat_base\", \"monster_grade_level\"}\r\nend\r\n\r\nfunction main()\r\n   local original_lvl;\r\n\r\n   if monster_grade_hidden_level == 0 then\r\n      original_lvl = monster_grade_level\r\n   else\r\n      original_lvl = monster_grade_hidden_level\r\n   end\r\n\r\n   return stat_base + math.floor(math.pow((monster_level - original_lvl ) / 70 , 0.77))\r\nend"
		},
		{
			"id": 46,
			"formulaName": "jobs_earned_levels_to_carriable_weight_bonus",
			"luaFormula": "function params()\r\n   return {\"sum_of_jobs_earned_levels\"}\r\nend\r\n\r\nfunction main()\r\n   local cw = 0;\r\n\r\n   local weight_per_level = 12;\r\n   local levels_per_step = 200;\r\n\r\n   for i=1,sum_of_jobs_earned_levels do\r\n      cw = cw + weight_per_level\r\n      if i % levels_per_step == 0 and weight_per_level > 1 then\r\n         weight_per_level = weight_per_level - 1\r\n      end\r\n   end\r\n\r\n   return cw\r\nend\r\n"
		},
		{
			"id": 56,
			"formulaName": "infinite_breach_room_score_to_border",
			"luaFormula": "function params()\r\n   return {\"ib_floor\",\"ib_room_absolute_score\", \"ib_room_relative_score\"}\r\nend\r\n\r\nfunction main()\r\n   return math.max(0, math.min(2, math.floor(ib_room_relative_score / 25)))\r\nend"
		},
		{
			"id": 69,
			"formulaName": "infinite_breach_exp_multiplier",
			"luaFormula": "--\r\n-- Coefficient d'exp\u00e9rience finale en fonction du score de la salle.\r\n-- @author : Robin Starbender Nicolet\r\n--\r\n\r\nfunction params()\r\n   return {\"ib_floor\",\"ib_room_absolute_score\", \"ib_room_relative_score\"}\r\nend\r\n\r\nfunction main()\r\n  return 1 + ib_room_relative_score / 100\r\nend"
		},
		{
			"id": 70,
			"formulaName": "monster_hidden_level",
			"luaFormula": "function params()\r\n   return {\"monster_level\", \"monster_grade_hidden_level\", \"monster_grade_level\"}\r\nend\r\n\r\nfunction main()\r\n   return math.min( 220, monster_level)\r\nend"
		},
		{
			"id": 74,
			"formulaName": "experience_to_character_level",
			"luaFormula": "function params()\r\n   return {\"experience\"}\r\nend\r\n\r\n\r\nexperiencePerLevel = {0,110,650,1500,2800,4800,7300,10500,14500,19200,25200,32600,41000,50500,61000,75000,91000,115000,142000,171000,202000,235000,270000,310000,353000,398500,448000,503000,561000,621600,687000,755000,829000,910000,1000000,1100000,1240000,1400000,1580000,1780000,2000000,2250000,2530000,2850000,3200000,3570000,3960000,4400000,4860000,5350000,5860000,6390000,6950000,7530000,8130000,8765100,9420000,10150000,10894000,11655000,12450000,13278000,14138000,15171000,16251000,17377000,18553000,19778000,21055000,22385000,23769000,25209000,26707000,28264000,29882000,31563000,33307000,35118000,36997000,38945000,40965000,43059000,45229000,47476000,49803000,52211000,54704000,57284000,59952000,62712000,65565000,68514000,71561000,74710000,77963000,81323000,84792000,88374000,92071000,95886000,99823000,103885000,108075000,112396000,116853000,121447000,126184000,131066000,136098000,141283000,146626000,152130000,157800000,163640000,169655000,175848000,182225000,188791000,195550000,202507000,209667000,217037000,224620000,232424000,240452000,248712000,257209000,265949000,274939000,284186000,293694000,303473000,313527000,323866000,334495000,345423000,356657000,368206000,380076000,392278000,404818000,417706000,430952000,444564000,458551000,472924000,487693000,502867000,518458000,534476000,550933000,567839000,585206000,603047000,621374000,640199000,659536000,679398000,699798000,720751000,742272000,764374000,787074000,810387000,834329000,858917000,884167000,910098000,936727000,964073000,992154000,1020991000,1050603000,1081010000,1112235000,1144298000,1177222000,1211030000,1245745000,1281393000,1317997000,1355584000,1404179000,1463811000,1534506000,1616294000,1709205000,1813267000,1928513000,2054975000,2192686000,2341679000,2501990000,2673655000,2856710000,3051194000,3257146000,3474606000,3703616000,5555424000}\r\n\r\nfunction expToLevel(exp)\r\n  local level = 1;\r\n  \r\n  for i=2,200 do\r\n    if exp >= experiencePerLevel[i] then\r\n      level = i;\r\n    end\r\n  end\r\n  \r\n  return level;\r\nend\r\n\r\nfunction expToOmega(exp)    \r\n  local omega = -1;\r\n  local expNextOmega = 0;\r\n  \r\n  while expNextOmega <= exp do   \r\n    omega = omega + 1\r\n    expNextOmega = expNextOmega + 50000000 * math.pow(1.01, omega) \r\n  end\r\n  \r\n  return omega\r\nend\r\n\r\nfunction main()\r\n  \r\n  local exp = experience;\r\n  \r\n  local level = expToLevel(exp);\r\n  \r\n  if level == 200 then\r\n    exp = exp - experiencePerLevel[level];\r\n    level = level + expToOmega(exp);\r\n  end\r\n  \r\n  return level;\r\nend"
		},
		{
			"id": 76,
			"formulaName": "t5_tempoken_to_experience",
			"luaFormula": "function params()\r\n   return {\"tempoken\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3800 * math.pow(tempoken, 1.7))\r\nend"
		},
		{
			"id": 77,
			"formulaName": "character_level_to_experience",
			"luaFormula": "function params()\r\n   return {\"level\"}\r\nend\r\n\r\nexperiencePerLevel = {0,110,650,1500,2800,4800,7300,10500,14500,19200,25200,32600,41000,50500,61000,75000,91000,115000,142000,171000,202000,235000,270000,310000,353000,398500,448000,503000,561000,621600,687000,755000,829000,910000,1000000,1100000,1240000,1400000,1580000,1780000,2000000,2250000,2530000,2850000,3200000,3570000,3960000,4400000,4860000,5350000,5860000,6390000,6950000,7530000,8130000,8765100,9420000,10150000,10894000,11655000,12450000,13278000,14138000,15171000,16251000,17377000,18553000,19778000,21055000,22385000,23769000,25209000,26707000,28264000,29882000,31563000,33307000,35118000,36997000,38945000,40965000,43059000,45229000,47476000,49803000,52211000,54704000,57284000,59952000,62712000,65565000,68514000,71561000,74710000,77963000,81323000,84792000,88374000,92071000,95886000,99823000,103885000,108075000,112396000,116853000,121447000,126184000,131066000,136098000,141283000,146626000,152130000,157800000,163640000,169655000,175848000,182225000,188791000,195550000,202507000,209667000,217037000,224620000,232424000,240452000,248712000,257209000,265949000,274939000,284186000,293694000,303473000,313527000,323866000,334495000,345423000,356657000,368206000,380076000,392278000,404818000,417706000,430952000,444564000,458551000,472924000,487693000,502867000,518458000,534476000,550933000,567839000,585206000,603047000,621374000,640199000,659536000,679398000,699798000,720751000,742272000,764374000,787074000,810387000,834329000,858917000,884167000,910098000,936727000,964073000,992154000,1020991000,1050603000,1081010000,1112235000,1144298000,1177222000,1211030000,1245745000,1281393000,1317997000,1355584000,1404179000,1463811000,1534506000,1616294000,1709205000,1813267000,1928513000,2054975000,2192686000,2341679000,2501990000,2673655000,2856710000,3051194000,3257146000,3474606000,3703616000,5555424000}\r\n\r\n\r\nfunction main()\r\n  \r\n  local l = math.max(1, math.min(level, 200));\r\n  local o = math.max(0, level - 200);\r\n  \r\n  local experience = experiencePerLevel[l];\r\n  \r\n  if o > 0 then\r\n    for i=0,o-1 do\r\n      experience = experience + 50000000 * math.pow(1.01, i);\r\n    end\r\n  end\r\n  \r\n  return experience;\r\nend"
		},
		{
			"id": 78,
			"formulaName": "seasonExperienceConversion_5",
			"luaFormula": "function params()\r\n   return {\"item_quantity_20763\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3800 * math.pow(item_quantity_20763, 1.7))\r\nend"
		},
		{
			"id": 79,
			"formulaName": "t6_tempoken_to_experience",
			"luaFormula": "function params()\r\n   return {\"tempoken\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3785 * math.pow(tempoken, 1.74))\r\nend"
		},
		{
			"id": 80,
			"formulaName": "seasonExperienceConversion_6",
			"luaFormula": "function params()\r\n   return {\"item_quantity_20763\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3785 * math.pow(item_quantity_20763, 1.74))\r\nend"
		},
		{
			"id": 83,
			"formulaName": "seasonExperienceConversion_7",
			"luaFormula": "function params()\r\n   return {\"item_quantity_20763\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3785 * math.pow(item_quantity_20763, 1.74))\r\nend"
		},
		{
			"id": 84,
			"formulaName": "t7_tempoken_to_experience",
			"luaFormula": "function params()\r\n   return {\"tempoken\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3785 * math.pow(tempoken, 1.74))\r\nend"
		},
		{
			"id": 85,
			"formulaName": "limit_time_modification_module",
			"luaFormula": "function main()\r\n   return 10\r\nend"
		},
		{
			"id": 86,
			"formulaName": "prism_priority_after_ava",
			"luaFormula": "function params()\r\n   return {\"number_controlled_territories\"}\r\nend\r\n\r\nfunction main()\r\n   return 600 * number_controlled_territories * monster_level / 4000 / 100;\r\nend"
		},
		{
			"id": 89,
			"formulaName": "invulnerability_after_setup",
			"luaFormula": "function params()\r\n   return {\"number_controlled_territories\"}\r\nend\r\n\r\nfunction main()\r\n   return 1440 * math.pow(number_controlled_territories + 1,-0.8);\r\nend"
		},
		{
			"id": 90,
			"formulaName": "durability_variation_prism",
			"luaFormula": "function params()\r\n   return {\"number_recycled_nuggets\", \"prism_age\",\"durability\"}\r\nend\r\n\r\nfunction main()\r\n   local coeff = 100480 - 480 * math.min(168, prism_age);\r\n   return durability - math.min(durability, number_recycled_nuggets / coeff);\r\nend"
		},
		{
			"id": 91,
			"formulaName": "banning_time_attack_prism",
			"luaFormula": "function main()\r\n   return 60\r\nend"
		},
		{
			"id": 94,
			"formulaName": "guild_max_members",
			"luaFormula": "function params()\r\n   return {\"guild_level\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor(250 + guild_level * 0.5);\r\nend"
		},
		{
			"id": 97,
			"formulaName": "victory_points_fight_koth",
			"luaFormula": "function params()\r\n    return {\"number_players_my_alliance\",\"number_players_opponent_alliance\",\"roles_variation\"}\r\nend\r\n\r\nfunction main()\r\n\r\n    local default_win_points = 50\r\n    local base_points = 0\r\n\r\n    base_points = default_win_points * math.min(number_players_my_alliance,number_players_opponent_alliance);\r\n\r\n    return math.floor(base_points + roles_variation);\r\n\r\nend"
		},
		{
			"id": 98,
			"formulaName": "defeat_points_fight_koth",
			"luaFormula": "function params()\r\n    return {\"number_players_my_alliance\",\"number_players_opponent_alliance\",\"roles_variation\"}\r\nend\r\n\r\nfunction main()\r\n\r\n    local default_lose_points = -25\r\n    local base_points = 0\r\n\r\n    base_points = default_lose_points * math.min(number_players_my_alliance,number_players_opponent_alliance);\r\n\r\n    return math.floor(base_points - roles_variation);\r\n\r\nend"
		},
		{
			"id": 99,
			"formulaName": "xp_base",
			"luaFormula": "local GROUP_EXPERIENCE_BONUS = { 1, 1.1, 1.5, 2.3, 3.1, 3.6, 4.2, 4.7 }\r\n\r\n\r\n-- players : list of fighter data\r\n--   level : current level of fighter\r\n--   isCompanion : if the fighter is a companion\r\n--   isStillPresentInFight : if the fighter is still present in fight (if no surrender)\r\n-- monsters : list of monster in fight\r\n--   level : current level of monster\r\n--   xp : default monster xp, set from AGT or from monster_xp script\r\n--   bonusFamily : bonus coefficient if the family of this monster has a xp boost (1 for no bonus)\r\n--   bonusAlmanach : bonus almanach if the current almanach has a xp boost on this monster (1 for no bonus)\r\n--   alive : if the monster is dead in the end of the fight\r\n-- fightIsWin true if the fight is win by the players\r\n-- rewardRate : coefficient of the fight (bonusmap)\r\nfunction params()\r\n    return { \"players\", \"monsters\", \"fightIsWin\", \"rewardRate\" }\r\nend\r\n\r\n---Retrieve the max level from the players group\r\nlocal function getMaxPlayerLevel()\r\n    local maxLevel = 0\r\n    for _, player in pairs(players) do\r\n        if maxLevel < player.level then\r\n            maxLevel = player.level\r\n        end\r\n    end\r\n\r\n    return maxLevel;\r\nend\r\n\r\n-- Retrieve the total level from the group\r\nlocal function getTotalPlayerLevel()\r\n    local total = 0\r\n    for _, player in pairs(players) do\r\n        total = total + player.level\r\n    end\r\n\r\n    return total\r\nend\r\n\r\n-- Retrieve the total level from a specific monster wave\r\nlocal function getMaxMonsterLevel()\r\n    local total = 0\r\n    for _, monsters in pairs(monsters) do\r\n        total = total + monsters.level\r\n    end\r\n\r\n    return total\r\nend\r\n\r\n--Count how many human are present in this fight\r\n--a human is present if this level is more than the minLevelRequired\r\n--                   if he is not a companion\r\n--                   if he is still present in fight\r\nlocal function getHumansCount()\r\n    local minLevelRequired = getMaxPlayerLevel() / 3\r\n\r\n    local humansCount = 0\r\n\r\n    for _, player in pairs(players) do\r\n        if player.level > minLevelRequired and player.isCompanion == false and player.isStillPresentInFight then\r\n            humansCount = humansCount + 1\r\n        end\r\n    end\r\n\r\n    return humansCount\r\nend\r\n\r\nlocal function getGroupXPCoefficient()\r\n    local coefficient = 1\r\n    local totalMonsterLevel = getMaxMonsterLevel()\r\n    local totalPlayerLevel = getTotalPlayerLevel()\r\n\r\n    if totalPlayerLevel - 5 > totalMonsterLevel then\r\n        coefficient = totalMonsterLevel / totalPlayerLevel\r\n    else\r\n        if totalMonsterLevel > totalPlayerLevel + 10 then\r\n            coefficient = (totalPlayerLevel + 10) / totalMonsterLevel\r\n        end\r\n    end\r\n\r\n    return coefficient;\r\nend\r\n\r\nlocal function getMonsterXP()\r\n    local humansCountForXpBonus = getHumansCount(players)\r\n\r\n    local totalXP = 0\r\n\r\n    for _, monster in pairs(monsters) do\r\n        if monster.alive == false then\r\n            local monsterXp = monster.xp * monster.bonusFamily * monster.bonusAlmanach\r\n            totalXP = totalXP + monsterXp\r\n        end\r\n    end\r\n\r\n    totalXP = totalXP * getGroupXPCoefficient()\r\n\r\n    if fightIsWin then\r\n        if humansCountForXpBonus > 0 then\r\n            totalXP = totalXP * GROUP_EXPERIENCE_BONUS[humansCountForXpBonus]\r\n        end\r\n\r\n    else\r\n        totalXP = totalXP / 4\r\n    end\r\n\r\n    return totalXP\r\nend\r\n\r\nfunction main()\r\n    return math.floor(getMonsterXP() * rewardRate)\r\nend"
		},
		{
			"id": 100,
			"formulaName": "xp_player",
			"luaFormula": "-- xp : initial xp earn from monsters\r\n-- monsters : list of object\r\n--   level : level of monster\r\n-- player : object\r\n--   level : player level\r\n--   wisdom : player wisdom\r\n--   bonusMap : coefficient bonus from the map (prism boost)\r\n--   bonusAlmanach : coefficient bonus from almanach (bonus xp on map)\r\n-- maxLevel : level of the player group\r\n-- challengeCoefficient bonus challenge for player\r\nfunction params()\r\n    return { \"xp\", \"monsters\", \"player\", \"maxLevel\", \"challengeCoefficient\" }\r\nend\r\n\r\n\r\n-- Retrieve the total level from a specific monster wave\r\nlocal function getMaxMonsterLevel()\r\n    local maxLevel = 0\r\n    for _, monster in pairs(monsters) do\r\n        if (maxLevel < monster.level) then\r\n            maxLevel = monster.level\r\n        end\r\n\r\n    end\r\n\r\n    return maxLevel\r\nend\r\n\r\nlocal function getPlayerXP()\r\n    local maxMonsterLevel = getMaxMonsterLevel() * 2.5\r\n\r\n    local levelPlayer = math.min(player.level, maxMonsterLevel)\r\n    local baseXP = challengeCoefficient * ((xp * levelPlayer) / maxLevel)\r\n\r\n    if player.wisdom > 0 then\r\n        local wisdomPercent = (100 + player.wisdom) / 100\r\n        baseXP = baseXP * wisdomPercent\r\n    end\r\n\r\n    if player.bonusMap > 1 then\r\n        baseXP = baseXP * player.bonusMap\r\n    end\r\n\r\n    if player.bonusAlmanach > 1 then\r\n        baseXP = baseXP * player.bonusAlmanach\r\n    end\r\n\r\n    return math.max(1, baseXP)\r\nend\r\n\r\nfunction main()\r\n\r\n    if challengeCoefficient == nil then\r\n        challengeCoefficient = 1\r\n    end\r\n\r\n    return math.floor(getPlayerXP())\r\nend"
		},
		{
			"id": 101,
			"formulaName": "fight_preparation_time",
			"luaFormula": "function main()\r\r\n    return 45\r\r\nend"
		},
		{
			"id": 102,
			"formulaName": "additional_time_for_challenge",
			"luaFormula": "function main()\r\r\n    return 15\r\r\nend"
		},
		{
			"id": 103,
			"formulaName": "xp_distribution",
			"luaFormula": "-- xp : experience earn from the player\r\n-- player : player object\r\n--   level : player level\r\n--   isRiding : if player is on a ride in the end of the fight\r\n--   haveGuild : if player is on a guild\r\n--   sharedXPCoefficient : coefficient bonus for guild and ride\r\n--   unsharedXPCoefficient : coefficient bonus only for the player\r\n--   rideXPBonus : coefficient bonus if the player have the ride characteristic bonus\r\n-- ride : ride object\r\n--   level : level of the ride\r\n--   coefficient : experience shared coefficient\r\n--   bonusAlmanach : almanach xp ride boost\r\n--   wise : wise coefficient (if ride has wise capacity)\r\n-- guild : guild object\r\n--   level : level of the guild\r\n--   coefficient : experience shared coefficient\r\n-- bonus : should sharedXPCoefficient and unsharedXPCoefficient be applied ?\r\n\r\nfunction params()\r\n    return { \"xp\", \"player\", \"ride\", \"guild\", \"bonus\" }\r\nend\r\n\r\nlocal function getGlobalCoefficient()\r\n\r\n    local coefficientLeft = 1\r\n\r\n    local coefficientRide\r\n\r\n    if player.isRiding then\r\n        coefficientRide = ride.coefficient\r\n    else\r\n        coefficientRide = 0\r\n    end\r\n\r\n    coefficientLeft = coefficientLeft - coefficientRide\r\n\r\n    local realGuildCoefficient = coefficientLeft * guild.coefficient\r\n    coefficientLeft = coefficientLeft - realGuildCoefficient\r\n\r\n    return {\r\n        rideCoefficient = ride.coefficient,\r\n        guildCoefficient = realGuildCoefficient,\r\n        playerCoefficient = coefficientLeft\r\n    }\r\n\r\nend\r\n\r\nlocal function getRideXP()\r\n    if player.isRiding == false then\r\n        return 0\r\n    end\r\n\r\n    local xpForRideBonus = xp * (20 + player.rideXPBonus) / 100\r\n\r\n    local rideXP = getGlobalCoefficient().rideCoefficient * xp\r\n\r\n    if bonus then\r\n        rideXP = (rideXP + xpForRideBonus) * player.sharedXPCoefficient\r\n    end\r\n\r\n    local levelDiff = math.abs(player.level - ride.level)\r\n\r\n    if levelDiff > 10 and levelDiff <= 20 then\r\n        rideXP = rideXP * 0.8\r\n    end\r\n    if levelDiff > 20 and levelDiff <= 30 then\r\n        rideXP = rideXP * 0.6\r\n    end\r\n    if levelDiff > 30 and levelDiff <= 40 then\r\n        rideXP = rideXP * 0.4\r\n    end\r\n    if levelDiff > 40 and levelDiff <= 50 then\r\n        rideXP = rideXP * 0.3\r\n    end\r\n    if levelDiff > 50 and levelDiff <= 60 then\r\n        rideXP = rideXP * 0.2\r\n    end\r\n    if levelDiff > 60 and levelDiff <= 70 then\r\n        rideXP = rideXP * 0.15\r\n    end\r\n    if levelDiff > 70 then\r\n        rideXP = rideXP * 0.1\r\n    end\r\n\r\n    rideXP = rideXP * ride.wise\r\n    rideXP = rideXP / 10\r\n\r\n    if bonus then\r\n        rideXP = rideXP + (rideXP * ride.bonusAlmanach) / 100\r\n    end\r\n\r\n    return rideXP\r\nend\r\n\r\nlocal function getGuildXP()\r\n    if player.haveGuild == false then\r\n        return 0\r\n    end\r\n\r\n    local guildXP = getGlobalCoefficient().guildCoefficient * xp\r\n\r\n    local levelDiff = math.abs(player.level - guild.level)\r\n\r\n    if levelDiff > 10 and levelDiff <= 20 then\r\n        guildXP = (guildXP * 80) / 100\r\n    end\r\n    if levelDiff > 20 and levelDiff <= 30 then\r\n        guildXP = (guildXP * 60) / 100\r\n    end\r\n    if levelDiff > 30 and levelDiff <= 40 then\r\n        guildXP = (guildXP * 40) / 100\r\n    end\r\n    if levelDiff > 40 and levelDiff <= 50 then\r\n        guildXP = (guildXP * 30) / 100\r\n    end\r\n    if levelDiff > 50 and levelDiff <= 60 then\r\n        guildXP = (guildXP * 20) / 100\r\n    end\r\n    if levelDiff > 60 and levelDiff <= 70 then\r\n        guildXP = (guildXP * 15) / 100\r\n    end\r\n    if levelDiff > 70 then\r\n        guildXP = (guildXP * 10) / 100\r\n    end\r\n\r\n    guildXP = guildXP / 10\r\n\r\n    if bonus then\r\n        guildXP = guildXP * player.sharedXPCoefficient\r\n    end\r\n\r\n    return guildXP\r\nend\r\n\r\nlocal function getPlayerXP()\r\n    local playerXP = xp * getGlobalCoefficient().playerCoefficient\r\n\r\n    if bonus == false then\r\n        return playerXP\r\n    end\r\n\r\n    return playerXP * player.unsharedXPCoefficient\r\nend\r\n\r\nfunction main()\r\n    if xp < 0 then\r\n        return {\r\n            ride = 0,\r\n            guild = 0,\r\n            player = 0\r\n        }\r\n    end\r\n\r\n    return {\r\n        ride = math.floor(getRideXP()),\r\n        guild = math.floor(getGuildXP()),\r\n        player = math.floor(getPlayerXP())\r\n    }\r\n\r\nend"
		},
		{
			"id": 104,
			"formulaName": "defeated_elasticity",
			"luaFormula": "function params()\r\n    return { \"my_alliance_score\", \"opponent_alliance_score\", \"total_score_koth\", \"target_value\" }\r\nend\r\n\r\nfunction main()\r\n\r\n    local elastic_factor = 0\r\n    local delta_teams = 0\r\n\r\n    delta_teams = (opponent_alliance_score - my_alliance_score) / (math.max(0.08 * total_score_koth, 1))\r\n    elastic_factor = 2 * (1 / (1 + math.exp(delta_teams)));\r\n\r\n    return math.floor(target_value * elastic_factor)\r\nend"
		},
		{
			"id": 105,
			"formulaName": "victory_elasticity",
			"luaFormula": "function params()\r\n    return { \"my_alliance_score\", \"opponent_alliance_score\", \"total_score_koth\", \"target_value\" }\r\nend\r\n\r\nfunction main()\r\n\r\n    local elastic_factor = 0\r\n    local delta_teams = 0\r\n\r\n    delta_teams = (my_alliance_score - opponent_alliance_score) / (math.max(0.08 * total_score_koth, 1))\r\n    elastic_factor = 2 * (1 / (1 + math.exp(delta_teams)));\r\n\r\n    return math.floor(target_value * elastic_factor)\r\nend"
		},
		{
			"id": 106,
			"formulaName": "prospection_bonus_formula",
			"luaFormula": "function params()\r\n    return {\"prospection_bonus\"}\r\nend\r\n\r\nfunction main()\r\n--Fontion exponentielle \r\n    local expo_a = 85 \r\n        --Param\u00e8tres qui sert \u00e0 g\u00e9rer la pente de la courbe exponentielle.\r\n\r\n    local expo_O = 150\r\n        --Param\u00e8tre qui d\u00e9termine \u00e0 quelle valeur de prospection_bonus on atteint 50% de bonus.\r\n\r\n    local expo_m = 117\r\n        --Param\u00e8tre qui d\u00e9termine le %age maximum de la courbe.\r\n\r\n--Variables n\u00e9c\u00e9ssaires pour la formule\r\n    local prospection_max_multiplier = 1.5\r\n        --Valeur maximale atteignable du prospection_score. \r\n        --La fonction exponentielle va faire varier prospection_score entre 0 et prospection_max_multiplier.\r\n\r\n    local lower_prospection_score_to_1 = 0.26\r\n        --Ce param\u00e8tre permet de rectifier la courbe pour que le bonus commence \u00e0 0 lorsque le joueur a prospection_bonus de 0. \r\n        --Il est calcul\u00e9 \u00e0 la main.\r\n\r\n--Formule finale\r\n    local prospection_score = math.min(2.5,math.max(1,(1+prospection_max_multiplier*(expo_m*((1/(1+(math.exp(-((prospection_bonus-expo_O)/expo_a))))))/100))-lower_prospection_score_to_1))\r\n\r\nreturn prospection_score\r\nend"
		},
		{
			"id": 107,
			"formulaName": "seasonExperienceConversion_8",
			"luaFormula": "function params()\r\n   return {\"item_quantity_20763\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3785 * math.pow(item_quantity_20763, 1.74)*(1.5/(4000/item_quantity_20763)))\r\nend"
		},
		{
			"id": 108,
			"formulaName": "t8_tempoken_to_experience",
			"luaFormula": "function params()\r\n   return {\"tempoken\"}\r\nend\r\n\r\nfunction main()\r\n   return math.floor( 3785 * math.pow(tempoken, 1.74)*(1.5/(4000/tempoken)))\r\nend"
		},
		{
			"id": 109,
			"formulaName": "minimum_rank_by_player_level",
			"luaFormula": "function params()\r\n    return {\"player_level\"}\r\nend\r\n\r\nfunction main()\r\n    local minimum_rating_by_player_level = 0.058*(player_level^2)+5*player_level\r\n\r\nreturn minimum_rating_by_player_level\r\nend"
		},
		{
			"id": 110,
			"formulaName": "starting_rank_by_player_level",
			"luaFormula": "function params()\r\n    return {\"player_level\"}\r\nend\r\n\r\nfunction main()\r\n    local starting_rating_by_player_level = 0.57*(player_level^1.5)+9*player_level\r\n\r\nreturn starting_rating_by_player_level\r\nend"
		}
	]
}