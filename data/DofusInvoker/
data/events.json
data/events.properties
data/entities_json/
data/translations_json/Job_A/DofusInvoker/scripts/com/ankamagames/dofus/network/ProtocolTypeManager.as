package com.ankamagames.dofus.network
{
   import com.ankamagames.dofus.network.types.common.AbstractPlayerSearchInformation;
   import com.ankamagames.dofus.network.types.common.PlayerSearchCharacterNameInformation;
   import com.ankamagames.dofus.network.types.common.PlayerSearchTagInformation;
   import com.ankamagames.dofus.network.types.common.basic.StatisticData;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataBoolean;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataByte;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataInt;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataShort;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataString;
   import com.ankamagames.dofus.network.types.game.achievement.AchievementAchieved;
   import com.ankamagames.dofus.network.types.game.achievement.AchievementAchievedRewardable;
   import com.ankamagames.dofus.network.types.game.actions.fight.AbstractFightDispellableEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostStateEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostWeaponDamagesEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporarySpellBoostEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporarySpellImmunityEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTriggeredEffect;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstant;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantInteger;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantLong;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantString;
   import com.ankamagames.dofus.network.types.game.character.CharacterMinimalAllianceInformations;
   import com.ankamagames.dofus.network.types.game.character.CharacterMinimalGuildInformations;
   import com.ankamagames.dofus.network.types.game.character.CharacterMinimalPlusLookAndGradeInformations;
   import com.ankamagames.dofus.network.types.game.character.CharacterMinimalPlusLookInformations;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristic;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristicDetailed;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristicValue;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterUsableCharacteristicDetailed;
   import com.ankamagames.dofus.network.types.game.character.choice.CharacterBaseInformations;
   import com.ankamagames.dofus.network.types.game.character.choice.CharacterHardcoreOrEpicInformations;
   import com.ankamagames.dofus.network.types.game.character.debt.DebtInformation;
   import com.ankamagames.dofus.network.types.game.character.debt.KamaDebtInformation;
   import com.ankamagames.dofus.network.types.game.character.status.PlayerStatus;
   import com.ankamagames.dofus.network.types.game.character.status.PlayerStatusExtended;
   import com.ankamagames.dofus.network.types.game.context.EntityDispositionInformations;
   import com.ankamagames.dofus.network.types.game.context.FightEntityDispositionInformations;
   import com.ankamagames.dofus.network.types.game.context.GameContextActorInformations;
   import com.ankamagames.dofus.network.types.game.context.GameContextActorPositionInformations;
   import com.ankamagames.dofus.network.types.game.context.GameRolePlayTaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.context.IdentifiedEntityDispositionInformations;
   import com.ankamagames.dofus.network.types.game.context.MapCoordinates;
   import com.ankamagames.dofus.network.types.game.context.MapCoordinatesAndId;
   import com.ankamagames.dofus.network.types.game.context.MapCoordinatesExtended;
   import com.ankamagames.dofus.network.types.game.context.TaxCollectorStaticExtendedInformations;
   import com.ankamagames.dofus.network.types.game.context.TaxCollectorStaticInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.BaseSpawnMonsterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.FightAllianceTeamInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultAdditionalData;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultExperienceData;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultFighterListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultMutantListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultPlayerListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultPvpData;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultTaxCollectorListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberEntityInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberMonsterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberTaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberWithAllianceCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameContextBasicSpawnInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameContextSummonsInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightAIInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightCharacteristics;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightEntityInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterEntityLightInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterMonsterLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterNamedInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterNamedLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterTaxCollectorLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightMonsterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightMonsterWithAlignmentInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightMutantInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightTaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnCharacterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnCompanionInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnMonsterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnScaledMonsterInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.AllianceInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.BasicAllianceInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.BasicGuildInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.BasicNamedAllianceInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayActorInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayGroupMonsterInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayGroupMonsterWaveInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayHumanoidInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMerchantInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMountInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMutantInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNamedActorInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNpcInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNpcWithQuestInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayPortalInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayPrismInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayTreasureHintInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformationsWithAlternatives;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GuildInAllianceInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GuildInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOption;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionAlliance;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionEmote;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionFollowers;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionGuild;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionObjectUse;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionOrnament;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionSkillUse;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionSpeedMultiplier;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionTitle;
   import com.ankamagames.dofus.network.types.game.context.roleplay.breach.BreachBranch;
   import com.ankamagames.dofus.network.types.game.context.roleplay.breach.ExtendedBreachBranch;
   import com.ankamagames.dofus.network.types.game.context.roleplay.breach.ExtendedLockedBreachBranch;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyInvitationMemberInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyMemberArenaInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyMemberInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.entity.PartyEntityBaseInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.entity.PartyEntityMemberInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestActiveDetailedInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestActiveInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformationsWithCompletion;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.PortalInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStep;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepDig;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFight;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirection;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirectionToHint;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirectionToPOI;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffect;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectCreature;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDate;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDice;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDuration;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectInteger;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectLadder;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectMinMax;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectMount;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectString;
   import com.ankamagames.dofus.network.types.game.friend.AcquaintanceInformation;
   import com.ankamagames.dofus.network.types.game.friend.AcquaintanceOnlineInformation;
   import com.ankamagames.dofus.network.types.game.friend.FriendInformations;
   import com.ankamagames.dofus.network.types.game.friend.FriendOnlineInformations;
   import com.ankamagames.dofus.network.types.game.friend.FriendSpouseInformations;
   import com.ankamagames.dofus.network.types.game.friend.FriendSpouseOnlineInformations;
   import com.ankamagames.dofus.network.types.game.friend.IgnoredInformations;
   import com.ankamagames.dofus.network.types.game.friend.IgnoredOnlineInformations;
   import com.ankamagames.dofus.network.types.game.guild.logbook.GuildLogbookEntryBasicInformation;
   import com.ankamagames.dofus.network.types.game.guild.logbook.chest.GuildLogbookChestActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildLevelUpActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPaddockActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPlayerFlowActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPlayerRankUpdateActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildRankActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildUnlockNewTabActivity;
   import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorComplementaryInformations;
   import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorGuildInformations;
   import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorLootInformations;
   import com.ankamagames.dofus.network.types.game.guild.tax.TaxCollectorWaitingForHelpInformations;
   import com.ankamagames.dofus.network.types.game.house.AccountHouseInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseGuildedInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseInformationsForGuild;
   import com.ankamagames.dofus.network.types.game.house.HouseInformationsInside;
   import com.ankamagames.dofus.network.types.game.house.HouseInstanceInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseOnMapInformations;
   import com.ankamagames.dofus.network.types.game.idol.Idol;
   import com.ankamagames.dofus.network.types.game.idol.PartyIdol;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElement;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementNamedSkill;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementSkill;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementWithAgeBonus;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescription;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionCollect;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionCraft;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionTimed;
   import com.ankamagames.dofus.network.types.game.mount.UpdateMountBooleanCharacteristic;
   import com.ankamagames.dofus.network.types.game.mount.UpdateMountCharacteristic;
   import com.ankamagames.dofus.network.types.game.mount.UpdateMountIntegerCharacteristic;
   import com.ankamagames.dofus.network.types.game.paddock.PaddockBuyableInformations;
   import com.ankamagames.dofus.network.types.game.paddock.PaddockGuildedInformations;
   import com.ankamagames.dofus.network.types.game.presets.EntitiesPreset;
   import com.ankamagames.dofus.network.types.game.presets.ForgettableSpellsPreset;
   import com.ankamagames.dofus.network.types.game.presets.FullStatsPreset;
   import com.ankamagames.dofus.network.types.game.presets.IconNamedPreset;
   import com.ankamagames.dofus.network.types.game.presets.IdolsPreset;
   import com.ankamagames.dofus.network.types.game.presets.ItemsPreset;
   import com.ankamagames.dofus.network.types.game.presets.Preset;
   import com.ankamagames.dofus.network.types.game.presets.PresetsContainerPreset;
   import com.ankamagames.dofus.network.types.game.presets.SpellsPreset;
   import com.ankamagames.dofus.network.types.game.presets.StatsPreset;
   import com.ankamagames.dofus.network.types.game.prism.AllianceInsiderPrismInformation;
   import com.ankamagames.dofus.network.types.game.prism.AlliancePrismInformation;
   import com.ankamagames.dofus.network.types.game.prism.PrismGeolocalizedInformation;
   import com.ankamagames.dofus.network.types.game.prism.PrismInformation;
   import com.ankamagames.dofus.network.types.game.prism.PrismSubareaEmptyInfo;
   import com.ankamagames.dofus.network.types.game.shortcut.Shortcut;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutEmote;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutEntitiesPreset;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObject;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectIdolsPreset;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectItem;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectPreset;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutSmiley;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutSpell;
   import com.ankamagames.dofus.network.types.game.social.AbstractSocialGroupInfos;
   import com.ankamagames.dofus.network.types.game.social.AllianceFactSheetInformations;
   import com.ankamagames.dofus.network.types.game.social.AlliancedGuildFactSheetInformations;
   import com.ankamagames.dofus.network.types.game.social.GuildFactSheetInformations;
   import com.ankamagames.dofus.network.types.game.social.GuildInAllianceVersatileInformations;
   import com.ankamagames.dofus.network.types.game.social.GuildInsiderFactSheetInformations;
   import com.ankamagames.dofus.network.types.game.social.GuildVersatileInformations;
   import com.ankamagames.jerakine.managers.StoreDataManager;
   import flash.utils.Dictionary;
   
   public class ProtocolTypeManager
   {
      
      private static const _typesTypes:Dictionary = new Dictionary();
      
      {
         _typesTypes[5838] = CharacterMinimalPlusLookInformations;
         _typesTypes[3972] = CharacterBaseInformations;
         _typesTypes[2681] = PartyMemberInformations;
         _typesTypes[5619] = PartyMemberArenaInformations;
         _typesTypes[7042] = PartyInvitationMemberInformations;
         _typesTypes[5965] = CharacterHardcoreOrEpicInformations;
         _typesTypes[6211] = CharacterMinimalGuildInformations;
         _typesTypes[9153] = CharacterMinimalAllianceInformations;
         _typesTypes[9686] = CharacterMinimalPlusLookAndGradeInformations;
         _typesTypes[3972] = CharacterBaseInformations;
         _typesTypes[2681] = PartyMemberInformations;
         _typesTypes[5619] = PartyMemberArenaInformations;
         _typesTypes[7042] = PartyInvitationMemberInformations;
         _typesTypes[5965] = CharacterHardcoreOrEpicInformations;
         _typesTypes[6822] = EntityDispositionInformations;
         _typesTypes[6158] = IdentifiedEntityDispositionInformations;
         _typesTypes[1876] = FightEntityDispositionInformations;
         _typesTypes[7462] = AbstractSocialGroupInfos;
         _typesTypes[3099] = BasicGuildInformations;
         _typesTypes[5879] = GuildInformations;
         _typesTypes[558] = GuildFactSheetInformations;
         _typesTypes[487] = GuildInsiderFactSheetInformations;
         _typesTypes[2149] = GuildInAllianceInformations;
         _typesTypes[4861] = AlliancedGuildFactSheetInformations;
         _typesTypes[2850] = BasicAllianceInformations;
         _typesTypes[1895] = BasicNamedAllianceInformations;
         _typesTypes[1445] = AllianceInformations;
         _typesTypes[3583] = AllianceFactSheetInformations;
         _typesTypes[1609] = GuildVersatileInformations;
         _typesTypes[5353] = GuildInAllianceVersatileInformations;
         _typesTypes[558] = GuildFactSheetInformations;
         _typesTypes[487] = GuildInsiderFactSheetInformations;
         _typesTypes[3583] = AllianceFactSheetInformations;
         _typesTypes[2190] = PrismSubareaEmptyInfo;
         _typesTypes[8423] = PrismGeolocalizedInformation;
         _typesTypes[1566] = PrismInformation;
         _typesTypes[8324] = AlliancePrismInformation;
         _typesTypes[5890] = AllianceInsiderPrismInformation;
         _typesTypes[3999] = CharacterCharacteristic;
         _typesTypes[3932] = CharacterCharacteristicDetailed;
         _typesTypes[9660] = CharacterUsableCharacteristicDetailed;
         _typesTypes[6375] = CharacterCharacteristicValue;
         _typesTypes[8044] = FightTeamMemberInformations;
         _typesTypes[9478] = FightTeamMemberCharacterInformations;
         _typesTypes[1608] = FightTeamMemberWithAllianceCharacterInformations;
         _typesTypes[8225] = FightTeamMemberTaxCollectorInformations;
         _typesTypes[622] = FightTeamMemberMonsterInformations;
         _typesTypes[3000] = FightTeamMemberEntityInformation;
         _typesTypes[9665] = FightTeamInformations;
         _typesTypes[3124] = FightAllianceTeamInformations;
         _typesTypes[709] = GameFightCharacteristics;
         _typesTypes[676] = FightResultListEntry;
         _typesTypes[8547] = FightResultFighterListEntry;
         _typesTypes[1141] = FightResultTaxCollectorListEntry;
         _typesTypes[9016] = FightResultPlayerListEntry;
         _typesTypes[7849] = FightResultMutantListEntry;
         _typesTypes[2387] = FightResultAdditionalData;
         _typesTypes[5866] = FightResultPvpData;
         _typesTypes[3399] = FightResultExperienceData;
         _typesTypes[7598] = AbstractFightDispellableEffect;
         _typesTypes[1595] = FightTemporaryBoostEffect;
         _typesTypes[8812] = FightTemporaryBoostStateEffect;
         _typesTypes[1274] = FightTemporarySpellBoostEffect;
         _typesTypes[9808] = FightTemporaryBoostWeaponDamagesEffect;
         _typesTypes[5875] = FightTemporarySpellImmunityEffect;
         _typesTypes[5276] = FightTriggeredEffect;
         _typesTypes[2375] = ObjectEffect;
         _typesTypes[5142] = ObjectEffectInteger;
         _typesTypes[2792] = ObjectEffectCreature;
         _typesTypes[9939] = ObjectEffectLadder;
         _typesTypes[8669] = ObjectEffectMinMax;
         _typesTypes[5181] = ObjectEffectDuration;
         _typesTypes[4073] = ObjectEffectString;
         _typesTypes[9849] = ObjectEffectDice;
         _typesTypes[1793] = ObjectEffectDate;
         _typesTypes[2066] = ObjectEffectMount;
         _typesTypes[9715] = UpdateMountCharacteristic;
         _typesTypes[1498] = UpdateMountBooleanCharacteristic;
         _typesTypes[3041] = UpdateMountIntegerCharacteristic;
         _typesTypes[3762] = Shortcut;
         _typesTypes[3305] = ShortcutObject;
         _typesTypes[7965] = ShortcutObjectPreset;
         _typesTypes[9778] = ShortcutObjectIdolsPreset;
         _typesTypes[1320] = ShortcutObjectItem;
         _typesTypes[8571] = ShortcutSpell;
         _typesTypes[5066] = ShortcutSmiley;
         _typesTypes[6747] = ShortcutEmote;
         _typesTypes[8093] = ShortcutEntitiesPreset;
         _typesTypes[1259] = Idol;
         _typesTypes[8979] = PartyIdol;
         _typesTypes[8979] = PartyIdol;
         _typesTypes[3063] = AchievementAchieved;
         _typesTypes[2637] = AchievementAchievedRewardable;
         _typesTypes[3964] = IgnoredInformations;
         _typesTypes[277] = IgnoredOnlineInformations;
         _typesTypes[5744] = FriendInformations;
         _typesTypes[1113] = FriendOnlineInformations;
         _typesTypes[6961] = AcquaintanceInformation;
         _typesTypes[9922] = AcquaintanceOnlineInformation;
         _typesTypes[1698] = FriendSpouseInformations;
         _typesTypes[1090] = FriendSpouseOnlineInformations;
         _typesTypes[9259] = InteractiveElementSkill;
         _typesTypes[7491] = InteractiveElementNamedSkill;
         _typesTypes[7572] = InteractiveElement;
         _typesTypes[2757] = InteractiveElementWithAgeBonus;
         _typesTypes[2681] = PartyMemberInformations;
         _typesTypes[5619] = PartyMemberArenaInformations;
         _typesTypes[7042] = PartyInvitationMemberInformations;
         _typesTypes[1277] = PartyEntityBaseInformation;
         _typesTypes[6691] = PartyEntityMemberInformation;
         _typesTypes[2029] = SkillActionDescription;
         _typesTypes[4372] = SkillActionDescriptionTimed;
         _typesTypes[6936] = SkillActionDescriptionCollect;
         _typesTypes[1139] = SkillActionDescriptionCraft;
         _typesTypes[5804] = HouseInformations;
         _typesTypes[8301] = AccountHouseInformations;
         _typesTypes[5325] = HouseInformationsInside;
         _typesTypes[4778] = HouseInformationsForGuild;
         _typesTypes[7324] = HouseOnMapInformations;
         _typesTypes[5383] = HouseInstanceInformations;
         _typesTypes[8503] = HouseGuildedInformations;
         _typesTypes[1961] = PaddockBuyableInformations;
         _typesTypes[1931] = PaddockGuildedInformations;
         _typesTypes[4353] = GameContextActorPositionInformations;
         _typesTypes[6154] = GameContextActorInformations;
         _typesTypes[8667] = GameFightFighterInformations;
         _typesTypes[5338] = GameFightAIInformations;
         _typesTypes[5931] = GameFightMonsterInformations;
         _typesTypes[5161] = GameFightMonsterWithAlignmentInformations;
         _typesTypes[7033] = GameFightTaxCollectorInformations;
         _typesTypes[6988] = GameFightFighterNamedInformations;
         _typesTypes[8256] = GameFightCharacterInformations;
         _typesTypes[5030] = GameFightMutantInformations;
         _typesTypes[2308] = GameFightEntityInformation;
         _typesTypes[6893] = GameRolePlayActorInformations;
         _typesTypes[4532] = GameRolePlayNamedActorInformations;
         _typesTypes[2890] = GameRolePlayHumanoidInformations;
         _typesTypes[3361] = GameRolePlayMutantInformations;
         _typesTypes[9999] = GameRolePlayCharacterInformations;
         _typesTypes[4593] = GameRolePlayMountInformations;
         _typesTypes[3744] = GameRolePlayMerchantInformations;
         _typesTypes[1079] = GameRolePlayNpcInformations;
         _typesTypes[7406] = GameRolePlayNpcWithQuestInformations;
         _typesTypes[5208] = GameRolePlayGroupMonsterInformations;
         _typesTypes[8577] = GameRolePlayGroupMonsterWaveInformations;
         _typesTypes[2825] = GameRolePlayTreasureHintInformations;
         _typesTypes[7265] = GameRolePlayTaxCollectorInformations;
         _typesTypes[2910] = GameRolePlayPrismInformations;
         _typesTypes[7029] = GameRolePlayPortalInformations;
         _typesTypes[6154] = GameContextActorInformations;
         _typesTypes[8667] = GameFightFighterInformations;
         _typesTypes[5338] = GameFightAIInformations;
         _typesTypes[5931] = GameFightMonsterInformations;
         _typesTypes[5161] = GameFightMonsterWithAlignmentInformations;
         _typesTypes[7033] = GameFightTaxCollectorInformations;
         _typesTypes[6988] = GameFightFighterNamedInformations;
         _typesTypes[8256] = GameFightCharacterInformations;
         _typesTypes[5030] = GameFightMutantInformations;
         _typesTypes[2308] = GameFightEntityInformation;
         _typesTypes[6893] = GameRolePlayActorInformations;
         _typesTypes[4532] = GameRolePlayNamedActorInformations;
         _typesTypes[2890] = GameRolePlayHumanoidInformations;
         _typesTypes[3361] = GameRolePlayMutantInformations;
         _typesTypes[9999] = GameRolePlayCharacterInformations;
         _typesTypes[4593] = GameRolePlayMountInformations;
         _typesTypes[3744] = GameRolePlayMerchantInformations;
         _typesTypes[1079] = GameRolePlayNpcInformations;
         _typesTypes[7406] = GameRolePlayNpcWithQuestInformations;
         _typesTypes[5208] = GameRolePlayGroupMonsterInformations;
         _typesTypes[8577] = GameRolePlayGroupMonsterWaveInformations;
         _typesTypes[2825] = GameRolePlayTreasureHintInformations;
         _typesTypes[7265] = GameRolePlayTaxCollectorInformations;
         _typesTypes[2910] = GameRolePlayPrismInformations;
         _typesTypes[7029] = GameRolePlayPortalInformations;
         _typesTypes[6893] = GameRolePlayActorInformations;
         _typesTypes[4532] = GameRolePlayNamedActorInformations;
         _typesTypes[2890] = GameRolePlayHumanoidInformations;
         _typesTypes[3361] = GameRolePlayMutantInformations;
         _typesTypes[9999] = GameRolePlayCharacterInformations;
         _typesTypes[4593] = GameRolePlayMountInformations;
         _typesTypes[3744] = GameRolePlayMerchantInformations;
         _typesTypes[1079] = GameRolePlayNpcInformations;
         _typesTypes[7406] = GameRolePlayNpcWithQuestInformations;
         _typesTypes[5208] = GameRolePlayGroupMonsterInformations;
         _typesTypes[8577] = GameRolePlayGroupMonsterWaveInformations;
         _typesTypes[2825] = GameRolePlayTreasureHintInformations;
         _typesTypes[7265] = GameRolePlayTaxCollectorInformations;
         _typesTypes[2910] = GameRolePlayPrismInformations;
         _typesTypes[7029] = GameRolePlayPortalInformations;
         _typesTypes[4254] = HumanInformations;
         _typesTypes[7895] = HumanOption;
         _typesTypes[4121] = HumanOptionObjectUse;
         _typesTypes[6815] = HumanOptionAlliance;
         _typesTypes[1317] = HumanOptionGuild;
         _typesTypes[9052] = HumanOptionOrnament;
         _typesTypes[7493] = HumanOptionEmote;
         _typesTypes[8686] = HumanOptionTitle;
         _typesTypes[1413] = HumanOptionSkillUse;
         _typesTypes[5081] = HumanOptionSpeedMultiplier;
         _typesTypes[5290] = HumanOptionFollowers;
         _typesTypes[4346] = TaxCollectorStaticInformations;
         _typesTypes[2929] = TaxCollectorStaticExtendedInformations;
         _typesTypes[2087] = TaxCollectorInformations;
         _typesTypes[4404] = TaxCollectorComplementaryInformations;
         _typesTypes[3219] = TaxCollectorGuildInformations;
         _typesTypes[3251] = TaxCollectorLootInformations;
         _typesTypes[5562] = TaxCollectorWaitingForHelpInformations;
         _typesTypes[2259] = GroupMonsterStaticInformations;
         _typesTypes[6494] = GroupMonsterStaticInformationsWithAlternatives;
         _typesTypes[883] = QuestActiveInformations;
         _typesTypes[5482] = QuestActiveDetailedInformations;
         _typesTypes[3887] = QuestObjectiveInformations;
         _typesTypes[765] = QuestObjectiveInformationsWithCompletion;
         _typesTypes[7132] = SpawnInformation;
         _typesTypes[523] = BaseSpawnMonsterInformation;
         _typesTypes[5733] = SpawnScaledMonsterInformation;
         _typesTypes[9613] = SpawnMonsterInformation;
         _typesTypes[4647] = SpawnCharacterInformation;
         _typesTypes[2297] = SpawnCompanionInformation;
         _typesTypes[9317] = GameContextBasicSpawnInformation;
         _typesTypes[1691] = GameContextSummonsInformation;
         _typesTypes[8667] = GameFightFighterInformations;
         _typesTypes[5338] = GameFightAIInformations;
         _typesTypes[5931] = GameFightMonsterInformations;
         _typesTypes[5161] = GameFightMonsterWithAlignmentInformations;
         _typesTypes[7033] = GameFightTaxCollectorInformations;
         _typesTypes[6988] = GameFightFighterNamedInformations;
         _typesTypes[8256] = GameFightCharacterInformations;
         _typesTypes[5030] = GameFightMutantInformations;
         _typesTypes[2308] = GameFightEntityInformation;
         _typesTypes[1381] = GameFightFighterLightInformations;
         _typesTypes[6010] = GameFightFighterMonsterLightInformations;
         _typesTypes[4228] = GameFightFighterNamedLightInformations;
         _typesTypes[3187] = GameFightFighterTaxCollectorLightInformations;
         _typesTypes[9520] = GameFightFighterEntityLightInformation;
         _typesTypes[434] = MapCoordinates;
         _typesTypes[9300] = MapCoordinatesAndId;
         _typesTypes[892] = MapCoordinatesExtended;
         _typesTypes[4929] = Preset;
         _typesTypes[5978] = PresetsContainerPreset;
         _typesTypes[5740] = IconNamedPreset;
         _typesTypes[7557] = SpellsPreset;
         _typesTypes[2189] = ForgettableSpellsPreset;
         _typesTypes[7648] = StatsPreset;
         _typesTypes[9110] = IdolsPreset;
         _typesTypes[6291] = EntitiesPreset;
         _typesTypes[8548] = FullStatsPreset;
         _typesTypes[8763] = ItemsPreset;
         _typesTypes[9826] = TreasureHuntStep;
         _typesTypes[5302] = TreasureHuntStepFollowDirectionToPOI;
         _typesTypes[6207] = TreasureHuntStepDig;
         _typesTypes[832] = TreasureHuntStepFight;
         _typesTypes[4635] = TreasureHuntStepFollowDirectionToHint;
         _typesTypes[3809] = TreasureHuntStepFollowDirection;
         _typesTypes[5286] = AbstractPlayerSearchInformation;
         _typesTypes[8414] = PlayerSearchTagInformation;
         _typesTypes[4980] = PlayerSearchCharacterNameInformation;
         _typesTypes[9720] = PortalInformation;
         _typesTypes[4023] = BreachBranch;
         _typesTypes[2200] = ExtendedBreachBranch;
         _typesTypes[7105] = ExtendedLockedBreachBranch;
         _typesTypes[2200] = ExtendedBreachBranch;
         _typesTypes[7105] = ExtendedLockedBreachBranch;
         _typesTypes[6409] = PlayerStatus;
         _typesTypes[2424] = PlayerStatusExtended;
         _typesTypes[9098] = ServerSessionConstant;
         _typesTypes[8495] = ServerSessionConstantString;
         _typesTypes[9099] = ServerSessionConstantInteger;
         _typesTypes[1486] = ServerSessionConstantLong;
         _typesTypes[9676] = StatisticData;
         _typesTypes[8260] = StatisticDataInt;
         _typesTypes[2517] = StatisticDataBoolean;
         _typesTypes[603] = StatisticDataShort;
         _typesTypes[6817] = StatisticDataString;
         _typesTypes[8126] = StatisticDataByte;
         _typesTypes[2854] = DebtInformation;
         _typesTypes[1295] = KamaDebtInformation;
         _typesTypes[9953] = GuildLogbookEntryBasicInformation;
         _typesTypes[3613] = GuildRankActivity;
         _typesTypes[9810] = GuildPlayerRankUpdateActivity;
         _typesTypes[9668] = GuildLogbookChestActivity;
         _typesTypes[118] = GuildLevelUpActivity;
         _typesTypes[2307] = GuildPaddockActivity;
         _typesTypes[3798] = GuildPlayerFlowActivity;
         _typesTypes[7590] = GuildUnlockNewTabActivity;
      }
      
      public function ProtocolTypeManager()
      {
         super();
      }
      
      public static function getInstance(base:Class, typeId:uint) : *
      {
         var objType:Class = _typesTypes[typeId];
         if(!objType)
         {
            throw new Error("Type with id " + typeId + " is unknown.");
         }
         var obj:* = new objType();
         if(!(obj is base))
         {
            throw new Error("Type " + typeId + " is not a " + base + ".");
         }
         return obj;
      }
      
      public static function register() : void
      {
         StoreDataManager.getInstance().registerClass(new CharacterMinimalPlusLookInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterBaseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterHardcoreOrEpicInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterMinimalGuildInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterMinimalAllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterMinimalPlusLookAndGradeInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterBaseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterHardcoreOrEpicInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new EntityDispositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentifiedEntityDispositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightEntityDispositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractSocialGroupInfos(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicGuildInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInsiderFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInAllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancedGuildFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicAllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicNamedAllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildVersatileInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInAllianceVersatileInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInsiderFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismSubareaEmptyInfo(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismGeolocalizedInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePrismInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInsiderPrismInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCharacteristicDetailed(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterUsableCharacteristicDetailed(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCharacteristicValue(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberWithAllianceCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightAllianceTeamInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacteristics(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultFighterListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultTaxCollectorListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultPlayerListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultMutantListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultAdditionalData(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultPvpData(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultExperienceData(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractFightDispellableEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporaryBoostEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporaryBoostStateEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporarySpellBoostEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporaryBoostWeaponDamagesEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporarySpellImmunityEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTriggeredEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectInteger(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectCreature(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectLadder(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectMinMax(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectDuration(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectString(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectDice(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectDate(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectMount(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountBooleanCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountIntegerCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new Shortcut(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObject(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObjectPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObjectIdolsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObjectItem(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutSpell(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutSmiley(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutEmote(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutEntitiesPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new Idol(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyIdol(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyIdol(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementAchieved(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementAchievedRewardable(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredOnlineInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendOnlineInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceOnlineInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendSpouseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendSpouseOnlineInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementSkill(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementNamedSkill(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElement(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementWithAgeBonus(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyEntityBaseInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyEntityMemberInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescription(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescriptionTimed(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescriptionCollect(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescriptionCraft(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountHouseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInformationsInside(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInformationsForGuild(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseOnMapInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInstanceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseGuildedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockBuyableInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockGuildedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextActorPositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMerchantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMerchantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMerchantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOption(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionObjectUse(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionAlliance(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionGuild(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionOrnament(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionEmote(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionTitle(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionSkillUse(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionSpeedMultiplier(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionFollowers(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorStaticInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorStaticExtendedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorComplementaryInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorGuildInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorLootInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorWaitingForHelpInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GroupMonsterStaticInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GroupMonsterStaticInformationsWithAlternatives(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestActiveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestActiveDetailedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestObjectiveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestObjectiveInformationsWithCompletion(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new BaseSpawnMonsterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnScaledMonsterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnMonsterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnCharacterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnCompanionInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextBasicSpawnInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextSummonsInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterMonsterLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterTaxCollectorLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterEntityLightInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new MapCoordinates(),true,true);
         StoreDataManager.getInstance().registerClass(new MapCoordinatesAndId(),true,true);
         StoreDataManager.getInstance().registerClass(new MapCoordinatesExtended(),true,true);
         StoreDataManager.getInstance().registerClass(new Preset(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetsContainerPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new IconNamedPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new SpellsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ForgettableSpellsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new StatsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new IdolsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new EntitiesPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new FullStatsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ItemsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStep(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirectionToPOI(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepDig(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFight(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirectionToHint(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirection(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPlayerSearchInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerSearchTagInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerSearchCharacterNameInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PortalInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedLockedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedLockedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatus(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatusExtended(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstant(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantString(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantInteger(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantLong(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticData(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataInt(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataBoolean(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataShort(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataString(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataByte(),true,true);
         StoreDataManager.getInstance().registerClass(new DebtInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new KamaDebtInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLogbookEntryBasicInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildRankActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerRankUpdateActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLogbookChestActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLevelUpActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPaddockActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerFlowActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildUnlockNewTabActivity(),true,true);
      }
   }
}
