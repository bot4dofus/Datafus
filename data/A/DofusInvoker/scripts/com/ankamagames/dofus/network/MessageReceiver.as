package com.ankamagames.dofus.network
{
   import com.ankamagames.dofus.network.messages.authorized.ConsoleCommandsListMessage;
   import com.ankamagames.dofus.network.messages.authorized.ConsoleEndMessage;
   import com.ankamagames.dofus.network.messages.authorized.ConsoleMessage;
   import com.ankamagames.dofus.network.messages.common.NetworkDataContainerMessage;
   import com.ankamagames.dofus.network.messages.common.basic.BasicPongMessage;
   import com.ankamagames.dofus.network.messages.connection.CredentialsAcknowledgementMessage;
   import com.ankamagames.dofus.network.messages.connection.ForceAccountErrorMessage;
   import com.ankamagames.dofus.network.messages.connection.ForceAccountStatusMessage;
   import com.ankamagames.dofus.network.messages.connection.HelloConnectMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationFailedBannedMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationFailedForBadVersionMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationFailedMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationSuccessMessage;
   import com.ankamagames.dofus.network.messages.connection.IdentificationSuccessWithLoginTokenMessage;
   import com.ankamagames.dofus.network.messages.connection.MigratedServerListMessage;
   import com.ankamagames.dofus.network.messages.connection.SelectedServerDataExtendedMessage;
   import com.ankamagames.dofus.network.messages.connection.SelectedServerDataMessage;
   import com.ankamagames.dofus.network.messages.connection.SelectedServerRefusedMessage;
   import com.ankamagames.dofus.network.messages.connection.ServerStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.connection.ServersListMessage;
   import com.ankamagames.dofus.network.messages.connection.register.AccountLinkRequiredMessage;
   import com.ankamagames.dofus.network.messages.connection.register.NicknameAcceptedMessage;
   import com.ankamagames.dofus.network.messages.connection.register.NicknameRefusedMessage;
   import com.ankamagames.dofus.network.messages.connection.register.NicknameRegistrationMessage;
   import com.ankamagames.dofus.network.messages.connection.search.AcquaintanceSearchErrorMessage;
   import com.ankamagames.dofus.network.messages.connection.search.AcquaintanceServerListMessage;
   import com.ankamagames.dofus.network.messages.debug.DebugClearHighlightCellsMessage;
   import com.ankamagames.dofus.network.messages.debug.DebugHighlightCellsMessage;
   import com.ankamagames.dofus.network.messages.debug.DebugInClientMessage;
   import com.ankamagames.dofus.network.messages.debug.DumpedEntityStatsMessage;
   import com.ankamagames.dofus.network.messages.game.PaginationAnswerAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementAlmostFinishedDetailedListMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementDetailedListMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementFinishedInformationMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementListMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementRewardErrorMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.AchievementRewardSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.achievement.FriendGuildWarnOnAchievementCompleteStateMessage;
   import com.ankamagames.dofus.network.messages.game.actions.AbstractGameActionMessage;
   import com.ankamagames.dofus.network.messages.game.actions.AbstractGameActionWithAckMessage;
   import com.ankamagames.dofus.network.messages.game.actions.GameActionNoopMessage;
   import com.ankamagames.dofus.network.messages.game.actions.GameActionSpamMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.AbstractGameActionFightTargetedAbilityMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightActivateGlyphTrapMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightCarryCharacterMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightChangeLookMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightCloseCombatMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDeathMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellEffectMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellSpellMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDispellableEffectMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDodgePointLossMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightDropCharacterMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightExchangePositionsMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightInvisibilityMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightInvisibleDetectedMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightKillMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifeAndShieldPointsLostMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifePointsGainMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightLifePointsLostMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightMarkCellsMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightModifyEffectsDurationMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightMultipleSummonMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightNoSpellCastMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightPointsVariationMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReduceDamagesMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReflectDamagesMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightReflectSpellMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSlideMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellCastMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellCooldownVariationMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSpellImmunityMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightStealKamaMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightSummonMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTackledMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTeleportOnSameMapMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightThrowCharacterMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTriggerEffectMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightTriggerGlyphTrapMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightUnmarkCellsMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionFightVanishMessage;
   import com.ankamagames.dofus.network.messages.game.actions.fight.GameActionUpdateEffectTriggerCountMessage;
   import com.ankamagames.dofus.network.messages.game.actions.sequence.SequenceEndMessage;
   import com.ankamagames.dofus.network.messages.game.actions.sequence.SequenceStartMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceBulletinMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceBulletinSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceCreationResultMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceCreationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceFactsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceFactsMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInsiderInfoMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitationStateRecrutedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitationStateRecruterMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceInvitedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceJoinedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceLeftMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceListMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMemberInformationUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMemberLeavingMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMemberOnlineStatusMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMembershipMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceModificationResultMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceModificationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMotdMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceMotdSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AlliancePartialListMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.AllianceRanksMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.KohUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.KothEndMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AllianceApplicationDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AllianceApplicationIsAnsweredMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AllianceApplicationPresenceMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AllianceApplicationReceivedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AllianceListApplicationAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AllianceListApplicationModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AlliancePlayerApplicationAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AlliancePlayerApplicationInformationMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.application.AlliancePlayerNoApplicationInformationMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.fight.AllianceFightFighterAddedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.fight.AllianceFightFighterRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.fight.AllianceFightFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.fight.AllianceFightInfoMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.fight.AllianceFightPhaseUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.fight.AllianceFightStartedMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.recruitment.AllianceRecruitmentInformationMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.recruitment.AllianceRecruitmentInvalidateMessage;
   import com.ankamagames.dofus.network.messages.game.alliance.summary.AllianceSummaryMessage;
   import com.ankamagames.dofus.network.messages.game.almanach.AlmanachCalendarDateMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AccountCapabilitiesMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AccountLoggingKickedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AlreadyConnectedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AuthenticationTicketAcceptedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.AuthenticationTicketRefusedMessage;
   import com.ankamagames.dofus.network.messages.game.approach.HelloGameMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ReloginTokenStatusMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ServerOptionalFeaturesMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ServerSessionConstantsMessage;
   import com.ankamagames.dofus.network.messages.game.approach.ServerSettingsMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.AtlasPointInformationsMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassResetMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdatePartyMemberMessage;
   import com.ankamagames.dofus.network.messages.game.atlas.compass.CompassUpdatePvpSeekMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicAckMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicDateMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicLatencyStatsRequestMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicNoOperationMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicTimeMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicWhoIsMessage;
   import com.ankamagames.dofus.network.messages.game.basic.BasicWhoIsNoMatchMessage;
   import com.ankamagames.dofus.network.messages.game.basic.CurrentServerStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.basic.NumericWhoIsMessage;
   import com.ankamagames.dofus.network.messages.game.basic.SequenceNumberRequestMessage;
   import com.ankamagames.dofus.network.messages.game.basic.TextInformationMessage;
   import com.ankamagames.dofus.network.messages.game.character.alignment.war.effort.AlignmentWarEffortDonatePreviewMessage;
   import com.ankamagames.dofus.network.messages.game.character.alignment.war.effort.AlignmentWarEffortDonationResultMessage;
   import com.ankamagames.dofus.network.messages.game.character.alignment.war.effort.CharacterAlignmentWarEffortProgressionMessage;
   import com.ankamagames.dofus.network.messages.game.character.alteration.AlterationAddedMessage;
   import com.ankamagames.dofus.network.messages.game.character.alteration.AlterationRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.character.alteration.AlterationsMessage;
   import com.ankamagames.dofus.network.messages.game.character.alteration.AlterationsUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedForceMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharacterSelectedSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListMessage;
   import com.ankamagames.dofus.network.messages.game.character.choice.CharactersListWithRemodelingMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterCanBeCreatedResultMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterCreationResultMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterNameSuggestionFailureMessage;
   import com.ankamagames.dofus.network.messages.game.character.creation.CharacterNameSuggestionSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.character.debt.DebtsDeleteMessage;
   import com.ankamagames.dofus.network.messages.game.character.debt.DebtsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.character.deletion.CharacterDeletionErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.deletion.CharacterDeletionPrepareMessage;
   import com.ankamagames.dofus.network.messages.game.character.spell.forgettable.ForgettableSpellDeleteMessage;
   import com.ankamagames.dofus.network.messages.game.character.spell.forgettable.ForgettableSpellEquipmentSlotsMessage;
   import com.ankamagames.dofus.network.messages.game.character.spell.forgettable.ForgettableSpellListUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.character.spellmodifier.ApplySpellModifierMessage;
   import com.ankamagames.dofus.network.messages.game.character.spellmodifier.RemoveSpellModifierMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterExperienceGainMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterLevelUpInformationMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterLevelUpMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.CharacterStatsListMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.FighterStatsListMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.LifePointsRegenBeginMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.LifePointsRegenEndMessage;
   import com.ankamagames.dofus.network.messages.game.character.stats.UpdateLifePointsMessage;
   import com.ankamagames.dofus.network.messages.game.character.status.PlayerStatusUpdateErrorMessage;
   import com.ankamagames.dofus.network.messages.game.character.status.PlayerStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatAbstractServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatAdminServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatErrorMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatKolizeumServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerCopyMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerCopyWithObjectMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerMessage;
   import com.ankamagames.dofus.network.messages.game.chat.ChatServerWithObjectMessage;
   import com.ankamagames.dofus.network.messages.game.chat.channel.ChannelEnablingChangeMessage;
   import com.ankamagames.dofus.network.messages.game.chat.channel.EnabledChannelsMessage;
   import com.ankamagames.dofus.network.messages.game.chat.community.ChatCommunityChannelCommunityMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.ChatSmileyExtraPackListMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.ChatSmileyMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.LocalizedChatSmileyMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.MoodSmileyResultMessage;
   import com.ankamagames.dofus.network.messages.game.chat.smiley.MoodSmileyUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.ConfirmationOfListeningTaxCollectorUpdatesMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorAddedMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorAttackedMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorAttackedResultMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorErrorMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorHarvestedMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorMovementsOfflineMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorOrderedSpellUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorPresetSpellUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorPresetsMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TaxCollectorStateUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.collector.tax.TopTaxCollectorListMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameCautiousMapMovementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextCreateErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextCreateMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextDestroyMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextMoveElementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextMoveMultipleElementsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRefreshEntityLookMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveElementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveElementWithEventMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveMultipleElementsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameContextRemoveMultipleElementsWithEventsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameEntitiesDispositionMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameEntityDispositionErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameEntityDispositionMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapChangeOrientationMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapChangeOrientationsMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapMovementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameMapNoMovementMessage;
   import com.ankamagames.dofus.network.messages.game.context.GameRefreshMonsterBoostsMessage;
   import com.ankamagames.dofus.network.messages.game.context.ShowCellMessage;
   import com.ankamagames.dofus.network.messages.game.context.ShowCellSpectatorMessage;
   import com.ankamagames.dofus.network.messages.game.context.display.DisplayNumericalValuePaddockMessage;
   import com.ankamagames.dofus.network.messages.game.context.dungeon.DungeonKeyRingMessage;
   import com.ankamagames.dofus.network.messages.game.context.dungeon.DungeonKeyRingUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightEndMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightHumanReadyStateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightJoinMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightNewRoundMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightNewWaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightOptionStateUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPauseMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementPossiblePositionsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsCancelledMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightPlacementSwapPositionsOfferMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightRemoveTeamMemberMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightResumeMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightResumeWithSlavesMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSpectateMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSpectatorJoinMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightStartMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightStartingMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightSynchronizeMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnEndMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnListMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnReadyRequestMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnResumeMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnStartMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightTurnStartPlayingMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.GameFightUpdateTeamMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.RefreshCharacterStatsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.SlaveNoLongerControledMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.SlaveSwitchContextMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.arena.ArenaFighterIdleMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.arena.ArenaFighterLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.breach.BreachGameFightEndMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeBonusChoiceSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeListMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeModSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeNumberMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeProposalMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.challenge.ChallengeTargetsMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightRefreshFighterMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightShowFighterMessage;
   import com.ankamagames.dofus.network.messages.game.context.fight.character.GameFightShowFighterRandomStaticPoseMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectListAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.GameDataPaddockObjectRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountDataErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountDataMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountEmoteIconUsedOkMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountEquipedErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountReleasedMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountRenamedMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountRidingMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountSetMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountSterilizedMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountUnSetMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.MountXpRatioMessage;
   import com.ankamagames.dofus.network.messages.game.context.mount.PaddockBuyResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.notification.NotificationByServerMessage;
   import com.ankamagames.dofus.network.messages.game.context.notification.NotificationListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.AnomalySubareaInformationResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.CurrentMapInstanceMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.CurrentMapMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowActorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowActorWithEventMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.GameRolePlayShowMultipleActorsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataInHavenBagMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataInHouseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsDataMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapComplementaryInformationsWithCoordsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapFightCountMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapFightStartPositionsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapObstacleUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightDetailsExtendedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.MapRunningFightListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.SubareaRewardRateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.TeleportOnSameMapMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.alignment.war.effort.AlignmentWarEffortProgressionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.AnomalyOpenedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.AnomalyStateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.anomaly.MapComplementaryInformationsAnomalyMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachBonusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachBudgetMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachCharactersMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachEnterMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachExitResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachRoomLockedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachRoomUnlockResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachSavedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachStateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.BreachTeleportResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.MapComplementaryInformationsBreachMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.branch.BreachBranchesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationCloseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationOfferMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachInvitationResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.meeting.BreachKickResponseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachRewardBoughtMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.breach.reward.BreachRewardsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.death.GameRolePlayGameOverMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.death.GameRolePlayPlayerLifeStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedActionFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedActionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.delay.GameRolePlayDelayedObjectUseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.document.DocumentReadingBeginMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.document.OpenGuideBookMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayMassiveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmotePlayMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.emote.EmoteRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayAggressionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayFightRequestCanceledMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayMonsterAngryAtPlayerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayMonsterNotAngryAtPlayerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayPlayerFightFriendlyAnsweredMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayPlayerFightFriendlyRequestedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayRemoveChallengeMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.GameRolePlayShowChallengeMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaFightPropositionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaFighterStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaInvitationCandidatesAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaLeagueRewardsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaPlayerBehavioursMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaRegistrationStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaRegistrationWarningMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaSwitchToFightServerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaSwitchToGameServerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.fight.arena.GameRolePlayArenaUpdatePlayerInfosMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.EditHavenBagFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.EditHavenBagStartMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagDailyLoteryMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagFurnituresMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagPackListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.HavenBagRoomUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.HavenBagPermissionsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagClosedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.havenbag.meeting.InviteInHavenBagOfferMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.AccountHouseMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseBuyResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HousePropertiesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseSellingUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.HouseToSellListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.HouseGuildNoneMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.houses.guild.HouseGuildRightsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobAllowMultiCraftRequestMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobBookSubscriptionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryAddMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryEntryMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectoryRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobCrafterDirectorySettingsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobDescriptionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceMultiUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceOtherPlayerUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobExperienceUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobLevelUpMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.job.JobMultiCraftAvailableSkillsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableCodeResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableShowCodeDialogMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateHouseDoorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.lockable.LockableStateUpdateStorageMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.AlliancePrismDialogQuestionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.EntityTalkMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.ListMapNpcsQuestStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcDialogCreationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcDialogQuestionMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.NpcGenericActionFailureMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.PortalDialogCreationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.TaxCollectorDialogQuestionBasicMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.npc.TaxCollectorDialogQuestionExtendedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundAddedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundListAddedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.objects.ObjectGroundRemovedMultipleMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.GameDataPlayFarmObjectAnimationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockPropertiesMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockSellBuyDialogMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.paddock.PaddockToSellListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyEventMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyMemberInFightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.AbstractPartyMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderAvailableDungeonsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderListenErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRegisterErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRegisterSuccessMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRoomContentMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.DungeonPartyFinderRoomContentUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyCancelInvitationNotificationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyCannotJoinErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyFollowStatusUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationCancelledForGuestMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDungeonDetailsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationDungeonMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyInvitationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyJoinMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyKickedByMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLeaderUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLocateMembersMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyLoyaltyStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberEjectedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberInStandardFightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyMemberRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyModifiableStatusMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNameSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNameUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNewGuestMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyNewMemberMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyRefuseInvitationNotificationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyRestrictedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyUpdateLightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.PartyUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.breach.PartyMemberInBreachFightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.party.entity.PartyEntityUpdateLightMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.purchasable.PurchasableDialogMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.FollowedQuestsMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestObjectiveValidatedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStartedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepInfoMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepStartedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestStepValidatedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.QuestValidatedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.WatchQuestListMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.quest.WatchQuestStepInfoMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.spell.SpellVariantActivationMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.stats.StatsUpgradeResultMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntAvailableRetryCountUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntDigRequestAnswerFailedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntDigRequestAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntFinishedMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntFlagRequestAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntRequestAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.treasureHunt.TreasureHuntShowLegendaryUIMessage;
   import com.ankamagames.dofus.network.messages.game.context.roleplay.visual.GameRolePlaySpellAnimMessage;
   import com.ankamagames.dofus.network.messages.game.dialog.LeaveDialogMessage;
   import com.ankamagames.dofus.network.messages.game.dialog.PauseDialogMessage;
   import com.ankamagames.dofus.network.messages.game.entity.EntitiesInformationMessage;
   import com.ankamagames.dofus.network.messages.game.entity.EntityInformationMessage;
   import com.ankamagames.dofus.network.messages.game.finishmoves.FinishMoveListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.AcquaintanceAddedMessage;
   import com.ankamagames.dofus.network.messages.game.friend.AcquaintancesListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.ContactAddFailureMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendAddFailureMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendAddedMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendDeleteResultMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendStatusShareStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendWarnOnConnectionStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendWarnOnLevelGainStateMessage;
   import com.ankamagames.dofus.network.messages.game.friend.FriendsListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredAddFailureMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredAddedMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredDeleteResultMessage;
   import com.ankamagames.dofus.network.messages.game.friend.IgnoredListMessage;
   import com.ankamagames.dofus.network.messages.game.friend.SpouseInformationsMessage;
   import com.ankamagames.dofus.network.messages.game.friend.SpouseStatusMessage;
   import com.ankamagames.dofus.network.messages.game.friend.WarnOnPermaDeathStateMessage;
   import com.ankamagames.dofus.network.messages.game.guest.GuestLimitationMessage;
   import com.ankamagames.dofus.network.messages.game.guest.GuestModeMessage;
   import com.ankamagames.dofus.network.messages.game.guild.ChallengeFightJoinRefusedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildBulletinMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildBulletinSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildChestTabContributionMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildChestTabContributionsMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildChestTabLastContributionMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildCreationResultMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildCreationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildFactsErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildFactsMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildHouseRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildHouseUpdateInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildHousesInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsGeneralMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsMemberUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsMembersMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInformationsPaddocksMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInvitationStateRecrutedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInvitationStateRecruterMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildInvitedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildJoinedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildLeftMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildLevelUpMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildListMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMemberLeavingMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMemberOnlineStatusMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMembershipMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildModificationResultMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildModificationStartedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMotdMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildMotdSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildPaddockBoughtMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildPaddockRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildRanksMessage;
   import com.ankamagames.dofus.network.messages.game.guild.GuildSummaryMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationIsAnsweredMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationPresenceMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildApplicationReceivedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildListApplicationAnswerMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildListApplicationModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildPlayerApplicationAbstractMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildPlayerApplicationInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.application.GuildPlayerNoApplicationInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.chest.AddListenerOnSynchronizedStorageMessage;
   import com.ankamagames.dofus.network.messages.game.guild.chest.ListenersOfSynchronizedStorageMessage;
   import com.ankamagames.dofus.network.messages.game.guild.chest.RemoveListenerOnSynchronizedStorageMessage;
   import com.ankamagames.dofus.network.messages.game.guild.logbook.GuildLogbookInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.recruitment.GuildRecruitmentInvalidateMessage;
   import com.ankamagames.dofus.network.messages.game.guild.recruitment.RecruitmentInformationMessage;
   import com.ankamagames.dofus.network.messages.game.guild.tax.TaxCollectorEquipmentUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.CharacterCapabilitiesMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.CharacterLoadingCompleteMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.OnConnectionEventMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.ServerExperienceModificatorMessage;
   import com.ankamagames.dofus.network.messages.game.initialization.SetCharacterRestrictionsMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveElementUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveMapUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUseEndedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUseErrorMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.InteractiveUsedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.StatedElementUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.StatedMapUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.GroupTeleportPlayerCloseMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.GroupTeleportPlayerOfferMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportBuddiesMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportBuddiesRequestedMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportPlayerCloseMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportPlayerOfferMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportToBuddyCloseMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.meeting.TeleportToBuddyOfferMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.KnownZaapListMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.TeleportDestinationsMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.ZaapDestinationsMessage;
   import com.ankamagames.dofus.network.messages.game.interactive.zaap.ZaapRespawnUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.KamasUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.MultiTabStorageMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.ObjectAveragePricesErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.ObjectAveragePricesMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.DecraftResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.EvolutiveObjectRecycleResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseBuyResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseGenericItemAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseGenericItemRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseInListUpdatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseItemAddOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseItemRemoveOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidHouseUnsoldItemsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidPriceForSellerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidPriceMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBidSearchOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeBuyOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftCountModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftPaymentModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultMagicWithObjectDescMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultWithObjectDescMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCraftResultWithObjectIdMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeCrafterJobLevelupMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeIsReadyMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeItemAutoCraftStopedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeLeaveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMoneyMovementInformationMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountFreeFromPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountStableErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountSterilizeFromPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsPaddockAddMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsPaddockRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableAddMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableBornAddMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsStableRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeMountsTakenFromPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeObjectsAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeOfflineSoldItemsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeOkMultiCraftMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeRequestedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeRequestedTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeSellOkMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkCraftMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkCraftWithInformationMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkJobIndexMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMountMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMountWithOutPaddockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMulticraftCrafterMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkMulticraftCustomerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkNpcShopMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkNpcTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkRecycleTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartOkRunesTradeMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedBidBuyerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedBidSellerMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedMountStockMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedTaxCollectorEquipmentMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedTaxCollectorShopMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithMultiTabStorageMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithPodsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStartedWithStorageMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeStoppedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTaxCollectorGetMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTypesExchangerDescriptionForUserMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeTypesItemsExchangerDescriptionForUserMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeWaitingResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ExchangeWeightMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.ItemNoMoreAvailableMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.RecycleResultMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.exchanges.UpdateMountCharacteristicsMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeKamaModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectModifiedInBagMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectPutInBagMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectRemovedFromBagMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectsModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangeObjectsRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ExchangePodsModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.GoldAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.InventoryContentMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.InventoryWeightMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.LivingObjectMessageMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectAssociatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.MimicryObjectPreviewMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectJobAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectModifiedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectMovementMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectQuantityMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsAddedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsDeletedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObjectsQuantityMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObtainedItemMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.ObtainedItemWithBonusMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.SetUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.SymbioticObjectAssociatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.SymbioticObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.WatchInventoryContentMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.WrapperObjectAssociatedMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.items.WrapperObjectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.spells.SpellListMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageInventoryContentMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageKamasUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectsRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.inventory.storage.StorageObjectsUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.look.AccessoryPreviewErrorMessage;
   import com.ankamagames.dofus.network.messages.game.look.AccessoryPreviewMessage;
   import com.ankamagames.dofus.network.messages.game.moderation.PopupWarningClosedMessage;
   import com.ankamagames.dofus.network.messages.game.moderation.PopupWarningMessage;
   import com.ankamagames.dofus.network.messages.game.modificator.AreaFightModificatorUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.nuggets.NuggetsInformationMessage;
   import com.ankamagames.dofus.network.messages.game.presets.InvalidPresetsMessage;
   import com.ankamagames.dofus.network.messages.game.presets.ItemForPresetUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetDeleteResultMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetSaveErrorMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetSavedMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetUseResultMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetUseResultWithMissingIdsMessage;
   import com.ankamagames.dofus.network.messages.game.presets.PresetsMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismAddOrUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismAttackResultMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismAttackedMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismRemoveMessage;
   import com.ankamagames.dofus.network.messages.game.prism.PrismsListMessage;
   import com.ankamagames.dofus.network.messages.game.progression.suggestion.ActivitySuggestionsMessage;
   import com.ankamagames.dofus.network.messages.game.pvp.AlignmentRankUpdateMessage;
   import com.ankamagames.dofus.network.messages.game.pvp.UpdateMapPlayersAgressableStatusMessage;
   import com.ankamagames.dofus.network.messages.game.pvp.UpdateSelfAgressableStatusMessage;
   import com.ankamagames.dofus.network.messages.game.script.CinematicMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarAddErrorMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarContentMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRefreshMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRemoveErrorMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarRemovedMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarReplacedMessage;
   import com.ankamagames.dofus.network.messages.game.shortcut.ShortcutBarSwapErrorMessage;
   import com.ankamagames.dofus.network.messages.game.social.BulletinMessage;
   import com.ankamagames.dofus.network.messages.game.social.ContactLookErrorMessage;
   import com.ankamagames.dofus.network.messages.game.social.ContactLookMessage;
   import com.ankamagames.dofus.network.messages.game.social.SocialNoticeMessage;
   import com.ankamagames.dofus.network.messages.game.social.SocialNoticeSetErrorMessage;
   import com.ankamagames.dofus.network.messages.game.startup.GameActionItemAddMessage;
   import com.ankamagames.dofus.network.messages.game.startup.GameActionItemConsumedMessage;
   import com.ankamagames.dofus.network.messages.game.startup.GameActionItemListMessage;
   import com.ankamagames.dofus.network.messages.game.subscriber.SubscriptionLimitationMessage;
   import com.ankamagames.dofus.network.messages.game.subscriber.SubscriptionZoneMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentGainedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentLostMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentSelectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.OrnamentSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleGainedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleLostMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleSelectErrorMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitleSelectedMessage;
   import com.ankamagames.dofus.network.messages.game.tinsel.TitlesAndOrnamentsListMessage;
   import com.ankamagames.dofus.network.messages.game.ui.ClientUIOpenedByObjectMessage;
   import com.ankamagames.dofus.network.messages.game.ui.ClientUIOpenedMessage;
   import com.ankamagames.dofus.network.messages.handshake.ProtocolRequired;
   import com.ankamagames.dofus.network.messages.queues.LoginQueueStatusMessage;
   import com.ankamagames.dofus.network.messages.queues.QueueStatusMessage;
   import com.ankamagames.dofus.network.messages.secure.TrustStatusMessage;
   import com.ankamagames.dofus.network.messages.security.CheckFileRequestMessage;
   import com.ankamagames.dofus.network.messages.security.RawDataMessage;
   import com.ankamagames.dofus.network.messages.server.basic.SystemMessageDisplayMessage;
   import com.ankamagames.dofus.network.messages.subscription.AccountInformationsUpdateMessage;
   import com.ankamagames.dofus.network.messages.subscription.AccountSubscriptionElapsedDurationMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiApiKeyMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiAuthErrorMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiBufferListMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiBuyValidationMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiConfirmationMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiSessionMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiShopApiKeyMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiTokenMessage;
   import com.ankamagames.dofus.network.messages.web.haapi.HaapiValidationMessage;
   import com.ankamagames.dofus.network.messages.wtf.ClientYouAreDrunkMessage;
   import com.ankamagames.jerakine.logger.Log;
   import com.ankamagames.jerakine.logger.Logger;
   import com.ankamagames.jerakine.managers.StoreDataManager;
   import com.ankamagames.jerakine.network.ICustomDataInput;
   import com.ankamagames.jerakine.network.INetworkMessage;
   import com.ankamagames.jerakine.network.RawDataParser;
   import com.ankamagames.jerakine.network.UnpackMode;
   import flash.utils.Dictionary;
   import flash.utils.getQualifiedClassName;
   
   public class MessageReceiver implements RawDataParser
   {
      
      private static const _log:Logger = Log.getLogger(getQualifiedClassName(MessageReceiver));
      
      private static const _messagesTypes:Dictionary = new Dictionary();
      
      private static const _unpackModes:Dictionary = new Dictionary();
      
      {
         _messagesTypes[2081] = PaginationAnswerAbstractMessage;
         _messagesTypes[9061] = NetworkDataContainerMessage;
         _messagesTypes[610] = ProtocolRequired;
         _messagesTypes[5436] = LoginQueueStatusMessage;
         _messagesTypes[5491] = QueueStatusMessage;
         _messagesTypes[5631] = ConsoleMessage;
         _messagesTypes[7083] = ConsoleEndMessage;
         _messagesTypes[5709] = ConsoleCommandsListMessage;
         _messagesTypes[2909] = HelloConnectMessage;
         _messagesTypes[8100] = CredentialsAcknowledgementMessage;
         _messagesTypes[8723] = NicknameRegistrationMessage;
         _messagesTypes[8119] = AccountLinkRequiredMessage;
         _messagesTypes[1363] = NicknameRefusedMessage;
         _messagesTypes[8621] = NicknameAcceptedMessage;
         _messagesTypes[3876] = IdentificationSuccessMessage;
         _messagesTypes[8978] = ForceAccountErrorMessage;
         _messagesTypes[7528] = ForceAccountStatusMessage;
         _messagesTypes[6554] = IdentificationSuccessWithLoginTokenMessage;
         _messagesTypes[7388] = IdentificationFailedMessage;
         _messagesTypes[6412] = IdentificationFailedBannedMessage;
         _messagesTypes[5123] = IdentificationFailedForBadVersionMessage;
         _messagesTypes[6791] = ServersListMessage;
         _messagesTypes[2374] = ServerStatusUpdateMessage;
         _messagesTypes[5981] = SelectedServerDataMessage;
         _messagesTypes[4551] = SelectedServerDataExtendedMessage;
         _messagesTypes[5669] = SelectedServerRefusedMessage;
         _messagesTypes[4300] = AcquaintanceSearchErrorMessage;
         _messagesTypes[4979] = AcquaintanceServerListMessage;
         _messagesTypes[2940] = MigratedServerListMessage;
         _messagesTypes[858] = HelloGameMessage;
         _messagesTypes[170] = AuthenticationTicketAcceptedMessage;
         _messagesTypes[1235] = AuthenticationTicketRefusedMessage;
         _messagesTypes[2660] = AlreadyConnectedMessage;
         _messagesTypes[3538] = AccountLoggingKickedMessage;
         _messagesTypes[8771] = ReloginTokenStatusMessage;
         _messagesTypes[8787] = ServerSettingsMessage;
         _messagesTypes[9531] = ServerSessionConstantsMessage;
         _messagesTypes[9400] = ServerOptionalFeaturesMessage;
         _messagesTypes[1358] = AccountCapabilitiesMessage;
         _messagesTypes[9399] = TrustStatusMessage;
         _messagesTypes[9970] = AccountInformationsUpdateMessage;
         _messagesTypes[667] = AccountSubscriptionElapsedDurationMessage;
         _messagesTypes[2483] = CheckFileRequestMessage;
         _messagesTypes[3710] = RawDataMessage;
         _messagesTypes[1976] = GameActionItemListMessage;
         _messagesTypes[8600] = GameActionItemAddMessage;
         _messagesTypes[1257] = GameActionItemConsumedMessage;
         _messagesTypes[6725] = CharacterCanBeCreatedResultMessage;
         _messagesTypes[5976] = CharacterCreationResultMessage;
         _messagesTypes[6242] = CharacterDeletionPrepareMessage;
         _messagesTypes[8975] = CharacterDeletionErrorMessage;
         _messagesTypes[4972] = CharacterNameSuggestionSuccessMessage;
         _messagesTypes[3968] = CharacterNameSuggestionFailureMessage;
         _messagesTypes[3720] = CharactersListMessage;
         _messagesTypes[2612] = CharactersListWithRemodelingMessage;
         _messagesTypes[5340] = CharactersListErrorMessage;
         _messagesTypes[2543] = CharacterSelectedSuccessMessage;
         _messagesTypes[9995] = CharacterSelectedForceMessage;
         _messagesTypes[6440] = CharacterSelectedErrorMessage;
         _messagesTypes[5970] = PopupWarningMessage;
         _messagesTypes[7639] = PopupWarningClosedMessage;
         _messagesTypes[7835] = BasicDateMessage;
         _messagesTypes[489] = BasicTimeMessage;
         _messagesTypes[271] = AlmanachCalendarDateMessage;
         _messagesTypes[2629] = BasicNoOperationMessage;
         _messagesTypes[8309] = BasicAckMessage;
         _messagesTypes[3970] = SystemMessageDisplayMessage;
         _messagesTypes[1819] = TextInformationMessage;
         _messagesTypes[6178] = OnConnectionEventMessage;
         _messagesTypes[8088] = SetCharacterRestrictionsMessage;
         _messagesTypes[4584] = ServerExperienceModificatorMessage;
         _messagesTypes[1333] = CharacterCapabilitiesMessage;
         _messagesTypes[5077] = CharacterLoadingCompleteMessage;
         _messagesTypes[6478] = GameContextCreateMessage;
         _messagesTypes[5580] = GameContextCreateErrorMessage;
         _messagesTypes[3704] = GameContextDestroyMessage;
         _messagesTypes[738] = GameContextRemoveElementMessage;
         _messagesTypes[5186] = GameContextRemoveMultipleElementsMessage;
         _messagesTypes[1879] = GameContextRemoveElementWithEventMessage;
         _messagesTypes[9693] = GameContextRemoveMultipleElementsWithEventsMessage;
         _messagesTypes[4094] = GameContextMoveElementMessage;
         _messagesTypes[4072] = GameContextMoveMultipleElementsMessage;
         _messagesTypes[7571] = GameContextRefreshEntityLookMessage;
         _messagesTypes[9225] = GameMapNoMovementMessage;
         _messagesTypes[6174] = GameMapMovementMessage;
         _messagesTypes[4129] = GameCautiousMapMovementMessage;
         _messagesTypes[4931] = GameMapChangeOrientationMessage;
         _messagesTypes[6158] = GameMapChangeOrientationsMessage;
         _messagesTypes[2138] = GameEntityDispositionMessage;
         _messagesTypes[1704] = GameEntitiesDispositionMessage;
         _messagesTypes[4091] = GameEntityDispositionErrorMessage;
         _messagesTypes[385] = GameRefreshMonsterBoostsMessage;
         _messagesTypes[4470] = PlayerStatusUpdateErrorMessage;
         _messagesTypes[712] = PlayerStatusUpdateMessage;
         _messagesTypes[7264] = BasicWhoIsMessage;
         _messagesTypes[821] = BasicWhoIsNoMatchMessage;
         _messagesTypes[9630] = NumericWhoIsMessage;
         _messagesTypes[5180] = BasicPongMessage;
         _messagesTypes[1102] = BasicLatencyStatsRequestMessage;
         _messagesTypes[5241] = SequenceNumberRequestMessage;
         _messagesTypes[1871] = CurrentServerStatusUpdateMessage;
         _messagesTypes[5911] = CinematicMessage;
         _messagesTypes[8612] = DumpedEntityStatsMessage;
         _messagesTypes[3220] = DebugHighlightCellsMessage;
         _messagesTypes[3788] = DebugClearHighlightCellsMessage;
         _messagesTypes[968] = DebugInClientMessage;
         _messagesTypes[2273] = ClientYouAreDrunkMessage;
         _messagesTypes[4937] = DisplayNumericalValuePaddockMessage;
         _messagesTypes[3145] = CurrentMapMessage;
         _messagesTypes[2503] = CurrentMapInstanceMessage;
         _messagesTypes[7355] = TeleportOnSameMapMessage;
         _messagesTypes[14] = MapFightCountMessage;
         _messagesTypes[6504] = MapRunningFightListMessage;
         _messagesTypes[2947] = MapRunningFightDetailsMessage;
         _messagesTypes[8625] = MapRunningFightDetailsExtendedMessage;
         _messagesTypes[5033] = MapObstacleUpdateMessage;
         _messagesTypes[695] = MapComplementaryInformationsDataMessage;
         _messagesTypes[2902] = MapComplementaryInformationsDataInHouseMessage;
         _messagesTypes[3302] = MapComplementaryInformationsWithCoordsMessage;
         _messagesTypes[5569] = SubareaRewardRateMessage;
         _messagesTypes[2338] = BreachEnterMessage;
         _messagesTypes[4007] = BreachTeleportResponseMessage;
         _messagesTypes[3579] = BreachRoomLockedMessage;
         _messagesTypes[8037] = BreachRoomUnlockResultMessage;
         _messagesTypes[8365] = BreachExitResponseMessage;
         _messagesTypes[9740] = MapComplementaryInformationsBreachMessage;
         _messagesTypes[3085] = BreachGameFightEndMessage;
         _messagesTypes[7651] = AnomalyStateMessage;
         _messagesTypes[3377] = AnomalyOpenedMessage;
         _messagesTypes[52] = MapComplementaryInformationsAnomalyMessage;
         _messagesTypes[3445] = MapFightStartPositionsUpdateMessage;
         _messagesTypes[3456] = GameRolePlayShowActorMessage;
         _messagesTypes[959] = GameRolePlayShowMultipleActorsMessage;
         _messagesTypes[3225] = GameRolePlayShowActorWithEventMessage;
         _messagesTypes[4427] = CharacterStatsListMessage;
         _messagesTypes[867] = FighterStatsListMessage;
         _messagesTypes[9665] = ApplySpellModifierMessage;
         _messagesTypes[4699] = RemoveSpellModifierMessage;
         _messagesTypes[2370] = CharacterLevelUpMessage;
         _messagesTypes[3140] = CharacterExperienceGainMessage;
         _messagesTypes[5417] = CharacterLevelUpInformationMessage;
         _messagesTypes[939] = UpdateLifePointsMessage;
         _messagesTypes[6745] = LifePointsRegenBeginMessage;
         _messagesTypes[7099] = LifePointsRegenEndMessage;
         _messagesTypes[9074] = GameRolePlayPlayerLifeStatusMessage;
         _messagesTypes[6207] = GameRolePlayGameOverMessage;
         _messagesTypes[2752] = GameRolePlayFightRequestCanceledMessage;
         _messagesTypes[4453] = GameRolePlayAggressionMessage;
         _messagesTypes[3018] = GameRolePlayPlayerFightFriendlyRequestedMessage;
         _messagesTypes[1584] = GameRolePlayPlayerFightFriendlyAnsweredMessage;
         _messagesTypes[6193] = GameRolePlayArenaRegistrationStatusMessage;
         _messagesTypes[3409] = GameRolePlayArenaFightPropositionMessage;
         _messagesTypes[9985] = GameRolePlayArenaFighterStatusMessage;
         _messagesTypes[5977] = GameRolePlayArenaUpdatePlayerInfosMessage;
         _messagesTypes[8232] = GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage;
         _messagesTypes[1936] = GameRolePlayArenaSwitchToFightServerMessage;
         _messagesTypes[9037] = GameRolePlayArenaSwitchToGameServerMessage;
         _messagesTypes[6700] = GameRolePlayArenaInvitationCandidatesAnswerMessage;
         _messagesTypes[8806] = GameRolePlayArenaLeagueRewardsMessage;
         _messagesTypes[7468] = GameRolePlayArenaPlayerBehavioursMessage;
         _messagesTypes[4858] = GameRolePlayArenaRegistrationWarningMessage;
         _messagesTypes[8414] = GameRolePlayMonsterAngryAtPlayerMessage;
         _messagesTypes[6627] = GameRolePlayMonsterNotAngryAtPlayerMessage;
         _messagesTypes[1759] = GameRolePlayShowChallengeMessage;
         _messagesTypes[2463] = GameRolePlayRemoveChallengeMessage;
         _messagesTypes[8624] = GameRolePlaySpellAnimMessage;
         _messagesTypes[4763] = GameRolePlayDelayedActionMessage;
         _messagesTypes[7965] = GameRolePlayDelayedObjectUseMessage;
         _messagesTypes[4342] = GameRolePlayDelayedActionFinishedMessage;
         _messagesTypes[9767] = ShowCellMessage;
         _messagesTypes[7844] = ShowCellSpectatorMessage;
         _messagesTypes[1962] = GameFightStartingMessage;
         _messagesTypes[1680] = GameFightJoinMessage;
         _messagesTypes[5315] = GameFightSpectatorJoinMessage;
         _messagesTypes[8544] = GameFightPlacementPossiblePositionsMessage;
         _messagesTypes[9969] = GameFightPlacementSwapPositionsErrorMessage;
         _messagesTypes[4399] = GameFightPlacementSwapPositionsOfferMessage;
         _messagesTypes[7121] = GameFightPlacementSwapPositionsCancelledMessage;
         _messagesTypes[4084] = GameFightPlacementSwapPositionsMessage;
         _messagesTypes[448] = GameFightOptionStateUpdateMessage;
         _messagesTypes[9852] = GameFightUpdateTeamMessage;
         _messagesTypes[2527] = GameFightRemoveTeamMemberMessage;
         _messagesTypes[8894] = GameFightHumanReadyStateMessage;
         _messagesTypes[3124] = GameFightLeaveMessage;
         _messagesTypes[1844] = GameFightStartMessage;
         _messagesTypes[3448] = GameFightSpectateMessage;
         _messagesTypes[1829] = GameFightResumeMessage;
         _messagesTypes[7814] = GameFightResumeWithSlavesMessage;
         _messagesTypes[1070] = GameFightEndMessage;
         _messagesTypes[1322] = GameFightNewRoundMessage;
         _messagesTypes[102] = GameFightTurnListMessage;
         _messagesTypes[1987] = GameFightTurnStartMessage;
         _messagesTypes[2439] = GameFightNewWaveMessage;
         _messagesTypes[2368] = GameFightTurnStartPlayingMessage;
         _messagesTypes[55] = GameFightTurnResumeMessage;
         _messagesTypes[5505] = GameFightPauseMessage;
         _messagesTypes[6145] = SlaveSwitchContextMessage;
         _messagesTypes[156] = SlaveNoLongerControledMessage;
         _messagesTypes[7193] = RefreshCharacterStatsMessage;
         _messagesTypes[2866] = GameFightTurnReadyRequestMessage;
         _messagesTypes[4483] = GameFightSynchronizeMessage;
         _messagesTypes[6718] = GameFightTurnEndMessage;
         _messagesTypes[3886] = GameFightShowFighterMessage;
         _messagesTypes[9672] = GameFightRefreshFighterMessage;
         _messagesTypes[2392] = GameFightShowFighterRandomStaticPoseMessage;
         _messagesTypes[8380] = ArenaFighterLeaveMessage;
         _messagesTypes[9203] = ArenaFighterIdleMessage;
         _messagesTypes[7930] = SequenceStartMessage;
         _messagesTypes[6647] = SequenceEndMessage;
         _messagesTypes[409] = AbstractGameActionMessage;
         _messagesTypes[5512] = GameActionNoopMessage;
         _messagesTypes[5126] = GameActionSpamMessage;
         _messagesTypes[7499] = AbstractGameActionWithAckMessage;
         _messagesTypes[1241] = GameActionFightNoSpellCastMessage;
         _messagesTypes[836] = AbstractGameActionFightTargetedAbilityMessage;
         _messagesTypes[1220] = GameActionFightSpellCastMessage;
         _messagesTypes[1826] = GameActionFightCloseCombatMessage;
         _messagesTypes[7800] = GameActionUpdateEffectTriggerCountMessage;
         _messagesTypes[3642] = GameActionFightInvisibleDetectedMessage;
         _messagesTypes[2600] = GameActionFightPointsVariationMessage;
         _messagesTypes[5588] = GameActionFightTackledMessage;
         _messagesTypes[2437] = GameActionFightDeathMessage;
         _messagesTypes[7364] = GameActionFightKillMessage;
         _messagesTypes[607] = GameActionFightVanishMessage;
         _messagesTypes[4289] = GameActionFightSpellCooldownVariationMessage;
         _messagesTypes[4010] = GameActionFightSpellImmunityMessage;
         _messagesTypes[5968] = GameActionFightLifePointsGainMessage;
         _messagesTypes[8706] = GameActionFightLifePointsLostMessage;
         _messagesTypes[2753] = GameActionFightLifeAndShieldPointsLostMessage;
         _messagesTypes[869] = GameActionFightDispellableEffectMessage;
         _messagesTypes[9227] = GameActionFightReflectSpellMessage;
         _messagesTypes[6000] = GameActionFightReduceDamagesMessage;
         _messagesTypes[2532] = GameActionFightReflectDamagesMessage;
         _messagesTypes[8102] = GameActionFightDodgePointLossMessage;
         _messagesTypes[9026] = GameActionFightSlideMessage;
         _messagesTypes[6155] = GameActionFightTeleportOnSameMapMessage;
         _messagesTypes[2330] = GameActionFightExchangePositionsMessage;
         _messagesTypes[4004] = GameActionFightDispellMessage;
         _messagesTypes[339] = GameActionFightDispellEffectMessage;
         _messagesTypes[1974] = GameActionFightDispellSpellMessage;
         _messagesTypes[3924] = GameActionFightModifyEffectsDurationMessage;
         _messagesTypes[8781] = GameActionFightTriggerEffectMessage;
         _messagesTypes[270] = GameActionFightStealKamaMessage;
         _messagesTypes[6798] = GameActionFightChangeLookMessage;
         _messagesTypes[4958] = GameActionFightInvisibilityMessage;
         _messagesTypes[7574] = GameActionFightSummonMessage;
         _messagesTypes[1078] = GameActionFightMultipleSummonMessage;
         _messagesTypes[7789] = GameActionFightMarkCellsMessage;
         _messagesTypes[2192] = GameActionFightUnmarkCellsMessage;
         _messagesTypes[6805] = GameActionFightTriggerGlyphTrapMessage;
         _messagesTypes[9295] = GameActionFightActivateGlyphTrapMessage;
         _messagesTypes[9711] = GameActionFightCarryCharacterMessage;
         _messagesTypes[2852] = GameActionFightThrowCharacterMessage;
         _messagesTypes[1472] = GameActionFightDropCharacterMessage;
         _messagesTypes[507] = EmoteListMessage;
         _messagesTypes[9586] = EmoteAddMessage;
         _messagesTypes[3592] = EmoteRemoveMessage;
         _messagesTypes[8348] = EmotePlayAbstractMessage;
         _messagesTypes[3603] = EmotePlayMessage;
         _messagesTypes[5777] = EmotePlayMassiveMessage;
         _messagesTypes[8572] = EmotePlayErrorMessage;
         _messagesTypes[9440] = ChatSmileyMessage;
         _messagesTypes[1093] = ChatCommunityChannelCommunityMessage;
         _messagesTypes[5044] = LocalizedChatSmileyMessage;
         _messagesTypes[6617] = MoodSmileyResultMessage;
         _messagesTypes[2327] = MoodSmileyUpdateMessage;
         _messagesTypes[6914] = ChatSmileyExtraPackListMessage;
         _messagesTypes[2850] = ChatAbstractServerMessage;
         _messagesTypes[2565] = ChatServerMessage;
         _messagesTypes[4372] = ChatKolizeumServerMessage;
         _messagesTypes[4140] = ChatAdminServerMessage;
         _messagesTypes[8618] = ChatServerWithObjectMessage;
         _messagesTypes[7495] = ChatServerCopyMessage;
         _messagesTypes[2602] = ChatServerCopyWithObjectMessage;
         _messagesTypes[5864] = ChatErrorMessage;
         _messagesTypes[3860] = EnabledChannelsMessage;
         _messagesTypes[5330] = ChannelEnablingChangeMessage;
         _messagesTypes[8002] = SpellListMessage;
         _messagesTypes[8558] = ForgettableSpellListUpdateMessage;
         _messagesTypes[6931] = ForgettableSpellDeleteMessage;
         _messagesTypes[9647] = ForgettableSpellEquipmentSlotsMessage;
         _messagesTypes[3110] = LeaveDialogMessage;
         _messagesTypes[1886] = PauseDialogMessage;
         _messagesTypes[5734] = InteractiveUseErrorMessage;
         _messagesTypes[8940] = InteractiveUsedMessage;
         _messagesTypes[5459] = InteractiveUseEndedMessage;
         _messagesTypes[2157] = InteractiveMapUpdateMessage;
         _messagesTypes[8533] = StatedMapUpdateMessage;
         _messagesTypes[8718] = InteractiveElementUpdatedMessage;
         _messagesTypes[5787] = StatedElementUpdatedMessage;
         _messagesTypes[9309] = ZaapRespawnUpdatedMessage;
         _messagesTypes[1074] = TeleportDestinationsMessage;
         _messagesTypes[6758] = ZaapDestinationsMessage;
         _messagesTypes[7664] = KnownZaapListMessage;
         _messagesTypes[5207] = TeleportBuddiesMessage;
         _messagesTypes[9327] = TeleportBuddiesRequestedMessage;
         _messagesTypes[8992] = TeleportToBuddyOfferMessage;
         _messagesTypes[5873] = TeleportToBuddyCloseMessage;
         _messagesTypes[1064] = TeleportPlayerOfferMessage;
         _messagesTypes[6790] = TeleportPlayerCloseMessage;
         _messagesTypes[9570] = GroupTeleportPlayerOfferMessage;
         _messagesTypes[8093] = GroupTeleportPlayerCloseMessage;
         _messagesTypes[2329] = SpellVariantActivationMessage;
         _messagesTypes[7979] = StatsUpgradeResultMessage;
         _messagesTypes[6466] = ChallengeListMessage;
         _messagesTypes[3251] = ChallengeTargetsMessage;
         _messagesTypes[6302] = ChallengeResultMessage;
         _messagesTypes[2139] = ChallengeNumberMessage;
         _messagesTypes[1008] = ChallengeProposalMessage;
         _messagesTypes[7816] = ChallengeSelectedMessage;
         _messagesTypes[1910] = ChallengeAddMessage;
         _messagesTypes[2631] = ChallengeModSelectedMessage;
         _messagesTypes[3796] = ChallengeBonusChoiceSelectedMessage;
         _messagesTypes[7132] = EntityInformationMessage;
         _messagesTypes[6656] = EntitiesInformationMessage;
         _messagesTypes[4298] = AchievementListMessage;
         _messagesTypes[8366] = AchievementDetailsMessage;
         _messagesTypes[8773] = AchievementDetailedListMessage;
         _messagesTypes[8401] = AchievementAlmostFinishedDetailedListMessage;
         _messagesTypes[1323] = AchievementFinishedMessage;
         _messagesTypes[2610] = AchievementFinishedInformationMessage;
         _messagesTypes[1941] = AchievementRewardSuccessMessage;
         _messagesTypes[9506] = AchievementRewardErrorMessage;
         _messagesTypes[188] = FriendGuildWarnOnAchievementCompleteStateMessage;
         _messagesTypes[1665] = DungeonKeyRingMessage;
         _messagesTypes[3419] = DungeonKeyRingUpdateMessage;
         _messagesTypes[9727] = UpdateMapPlayersAgressableStatusMessage;
         _messagesTypes[8145] = UpdateSelfAgressableStatusMessage;
         _messagesTypes[2232] = AlignmentRankUpdateMessage;
         _messagesTypes[8704] = CompassResetMessage;
         _messagesTypes[110] = CompassUpdateMessage;
         _messagesTypes[2901] = CompassUpdatePartyMemberMessage;
         _messagesTypes[2443] = AtlasPointInformationsMessage;
         _messagesTypes[210] = CompassUpdatePvpSeekMessage;
         _messagesTypes[6775] = AbstractPartyMessage;
         _messagesTypes[9359] = AbstractPartyEventMessage;
         _messagesTypes[9490] = PartyModifiableStatusMessage;
         _messagesTypes[5425] = PartyInvitationMessage;
         _messagesTypes[8319] = PartyInvitationDungeonMessage;
         _messagesTypes[7671] = PartyInvitationDetailsMessage;
         _messagesTypes[8279] = PartyInvitationDungeonDetailsMessage;
         _messagesTypes[6577] = PartyInvitationCancelledForGuestMessage;
         _messagesTypes[5196] = PartyCancelInvitationNotificationMessage;
         _messagesTypes[9374] = PartyRefuseInvitationNotificationMessage;
         _messagesTypes[3160] = PartyCannotJoinErrorMessage;
         _messagesTypes[8785] = PartyJoinMessage;
         _messagesTypes[6462] = PartyNewGuestMessage;
         _messagesTypes[4960] = PartyUpdateMessage;
         _messagesTypes[9480] = PartyNewMemberMessage;
         _messagesTypes[4567] = PartyUpdateLightMessage;
         _messagesTypes[3775] = PartyEntityUpdateLightMessage;
         _messagesTypes[6692] = PartyMemberRemoveMessage;
         _messagesTypes[6052] = PartyMemberEjectedMessage;
         _messagesTypes[860] = PartyLeaderUpdateMessage;
         _messagesTypes[4903] = PartyFollowStatusUpdateMessage;
         _messagesTypes[263] = PartyLocateMembersMessage;
         _messagesTypes[1026] = PartyLeaveMessage;
         _messagesTypes[6033] = PartyKickedByMessage;
         _messagesTypes[1488] = PartyRestrictedMessage;
         _messagesTypes[8798] = PartyDeletedMessage;
         _messagesTypes[1222] = PartyLoyaltyStatusMessage;
         _messagesTypes[9489] = AbstractPartyMemberInFightMessage;
         _messagesTypes[3094] = PartyMemberInStandardFightMessage;
         _messagesTypes[101] = PartyMemberInBreachFightMessage;
         _messagesTypes[7353] = PartyNameUpdateMessage;
         _messagesTypes[7694] = PartyNameSetErrorMessage;
         _messagesTypes[1652] = DungeonPartyFinderAvailableDungeonsMessage;
         _messagesTypes[8513] = DungeonPartyFinderListenErrorMessage;
         _messagesTypes[6025] = DungeonPartyFinderRoomContentMessage;
         _messagesTypes[4695] = DungeonPartyFinderRoomContentUpdateMessage;
         _messagesTypes[4458] = DungeonPartyFinderRegisterSuccessMessage;
         _messagesTypes[8873] = DungeonPartyFinderRegisterErrorMessage;
         _messagesTypes[792] = ContactAddFailureMessage;
         _messagesTypes[6714] = SpouseStatusMessage;
         _messagesTypes[1452] = FriendsListMessage;
         _messagesTypes[6451] = AcquaintancesListMessage;
         _messagesTypes[9828] = SpouseInformationsMessage;
         _messagesTypes[8282] = FriendAddFailureMessage;
         _messagesTypes[7829] = AcquaintanceAddedMessage;
         _messagesTypes[1551] = FriendAddedMessage;
         _messagesTypes[3423] = FriendUpdateMessage;
         _messagesTypes[5708] = FriendDeleteResultMessage;
         _messagesTypes[4506] = FriendWarnOnConnectionStateMessage;
         _messagesTypes[2751] = WarnOnPermaDeathStateMessage;
         _messagesTypes[7621] = FriendWarnOnLevelGainStateMessage;
         _messagesTypes[7408] = FriendStatusShareStateMessage;
         _messagesTypes[6361] = IgnoredListMessage;
         _messagesTypes[6611] = IgnoredAddFailureMessage;
         _messagesTypes[3429] = IgnoredAddedMessage;
         _messagesTypes[5106] = IgnoredDeleteResultMessage;
         _messagesTypes[8374] = KohUpdateMessage;
         _messagesTypes[4175] = KothEndMessage;
         _messagesTypes[3916] = AreaFightModificatorUpdateMessage;
         _messagesTypes[2372] = ClientUIOpenedMessage;
         _messagesTypes[5305] = ClientUIOpenedByObjectMessage;
         _messagesTypes[5122] = GuildListMessage;
         _messagesTypes[9456] = GuildLogbookInformationMessage;
         _messagesTypes[4026] = GuildChestTabContributionsMessage;
         _messagesTypes[9676] = GuildChestTabLastContributionMessage;
         _messagesTypes[7525] = GuildChestTabContributionMessage;
         _messagesTypes[7331] = GuildSummaryMessage;
         _messagesTypes[3789] = GuildCreationStartedMessage;
         _messagesTypes[2410] = GuildModificationStartedMessage;
         _messagesTypes[7399] = GuildCreationResultMessage;
         _messagesTypes[295] = GuildModificationResultMessage;
         _messagesTypes[296] = GuildInvitedMessage;
         _messagesTypes[3652] = GuildInvitationStateRecruterMessage;
         _messagesTypes[3782] = GuildInvitationStateRecrutedMessage;
         _messagesTypes[984] = GuildJoinedMessage;
         _messagesTypes[214] = GuildMemberOnlineStatusMessage;
         _messagesTypes[4169] = GuildInformationsGeneralMessage;
         _messagesTypes[6600] = GuildInformationsMembersMessage;
         _messagesTypes[2937] = GuildInformationsMemberUpdateMessage;
         _messagesTypes[7863] = GuildInformationsPaddocksMessage;
         _messagesTypes[1501] = GuildMemberLeavingMessage;
         _messagesTypes[5908] = GuildLeftMessage;
         _messagesTypes[189] = GuildMembershipMessage;
         _messagesTypes[1713] = GuildLevelUpMessage;
         _messagesTypes[1134] = GuildHousesInformationMessage;
         _messagesTypes[3816] = GuildHouseUpdateInformationMessage;
         _messagesTypes[6841] = GuildHouseRemoveMessage;
         _messagesTypes[5692] = GuildPaddockBoughtMessage;
         _messagesTypes[48] = GuildPaddockRemovedMessage;
         _messagesTypes[5087] = GuildMotdMessage;
         _messagesTypes[3887] = GuildMotdSetErrorMessage;
         _messagesTypes[7460] = GuildBulletinMessage;
         _messagesTypes[4667] = GuildBulletinSetErrorMessage;
         _messagesTypes[205] = GuildFactsErrorMessage;
         _messagesTypes[9389] = GuildFactsMessage;
         _messagesTypes[8184] = GuildRanksMessage;
         _messagesTypes[6593] = AllianceCreationStartedMessage;
         _messagesTypes[447] = AllianceModificationStartedMessage;
         _messagesTypes[8740] = AllianceCreationResultMessage;
         _messagesTypes[5648] = AllianceModificationResultMessage;
         _messagesTypes[5744] = AllianceMemberOnlineStatusMessage;
         _messagesTypes[5178] = AllianceApplicationDeletedMessage;
         _messagesTypes[4220] = AlliancePlayerApplicationAbstractMessage;
         _messagesTypes[96] = AlliancePlayerApplicationInformationMessage;
         _messagesTypes[971] = AlliancePlayerNoApplicationInformationMessage;
         _messagesTypes[5111] = AllianceApplicationIsAnsweredMessage;
         _messagesTypes[9160] = AllianceListApplicationAnswerMessage;
         _messagesTypes[8362] = AllianceListApplicationModifiedMessage;
         _messagesTypes[8915] = AllianceApplicationReceivedMessage;
         _messagesTypes[6378] = AllianceApplicationPresenceMessage;
         _messagesTypes[9279] = AllianceRecruitmentInformationMessage;
         _messagesTypes[3670] = AllianceRecruitmentInvalidateMessage;
         _messagesTypes[1579] = AllianceInvitedMessage;
         _messagesTypes[6001] = AllianceInvitationStateRecruterMessage;
         _messagesTypes[2728] = AllianceInvitationStateRecrutedMessage;
         _messagesTypes[6952] = AllianceJoinedMessage;
         _messagesTypes[945] = AllianceMemberLeavingMessage;
         _messagesTypes[8384] = AllianceLeftMessage;
         _messagesTypes[549] = AllianceMembershipMessage;
         _messagesTypes[2178] = AllianceSummaryMessage;
         _messagesTypes[7286] = AllianceFactsErrorMessage;
         _messagesTypes[3798] = AllianceFactsMessage;
         _messagesTypes[9275] = AllianceRanksMessage;
         _messagesTypes[2538] = AllianceMemberInformationUpdateMessage;
         _messagesTypes[1245] = AllianceListMessage;
         _messagesTypes[7536] = AlliancePartialListMessage;
         _messagesTypes[8929] = AllianceInsiderInfoMessage;
         _messagesTypes[1055] = AllianceFightInfoMessage;
         _messagesTypes[6373] = AllianceFightStartedMessage;
         _messagesTypes[3017] = AllianceFightFinishedMessage;
         _messagesTypes[460] = AllianceFightPhaseUpdateMessage;
         _messagesTypes[5166] = AllianceFightFighterAddedMessage;
         _messagesTypes[5651] = AllianceFightFighterRemovedMessage;
         _messagesTypes[8500] = AllianceMotdMessage;
         _messagesTypes[2581] = AllianceMotdSetErrorMessage;
         _messagesTypes[8980] = AllianceBulletinMessage;
         _messagesTypes[6084] = AllianceBulletinSetErrorMessage;
         _messagesTypes[7539] = TaxCollectorErrorMessage;
         _messagesTypes[2349] = TopTaxCollectorListMessage;
         _messagesTypes[9183] = TaxCollectorStateUpdateMessage;
         _messagesTypes[832] = TaxCollectorAddedMessage;
         _messagesTypes[3362] = TaxCollectorRemovedMessage;
         _messagesTypes[1504] = TaxCollectorAttackedMessage;
         _messagesTypes[7440] = TaxCollectorAttackedResultMessage;
         _messagesTypes[9412] = TaxCollectorHarvestedMessage;
         _messagesTypes[7893] = TaxCollectorMovementsOfflineMessage;
         _messagesTypes[5895] = TaxCollectorEquipmentUpdateMessage;
         _messagesTypes[7568] = ConfirmationOfListeningTaxCollectorUpdatesMessage;
         _messagesTypes[7681] = TaxCollectorOrderedSpellUpdatedMessage;
         _messagesTypes[8015] = TaxCollectorPresetsMessage;
         _messagesTypes[5819] = TaxCollectorPresetSpellUpdatedMessage;
         _messagesTypes[5839] = RecruitmentInformationMessage;
         _messagesTypes[1620] = GuildRecruitmentInvalidateMessage;
         _messagesTypes[6357] = GuildApplicationDeletedMessage;
         _messagesTypes[2453] = GuildPlayerApplicationAbstractMessage;
         _messagesTypes[5318] = GuildPlayerApplicationInformationMessage;
         _messagesTypes[933] = GuildPlayerNoApplicationInformationMessage;
         _messagesTypes[6248] = GuildApplicationIsAnsweredMessage;
         _messagesTypes[1049] = GuildListApplicationAnswerMessage;
         _messagesTypes[2316] = GuildListApplicationModifiedMessage;
         _messagesTypes[8112] = GuildApplicationReceivedMessage;
         _messagesTypes[3123] = GuildApplicationPresenceMessage;
         _messagesTypes[4233] = ListenersOfSynchronizedStorageMessage;
         _messagesTypes[8748] = AddListenerOnSynchronizedStorageMessage;
         _messagesTypes[8548] = RemoveListenerOnSynchronizedStorageMessage;
         _messagesTypes[3610] = PrismsListMessage;
         _messagesTypes[3378] = PrismAddOrUpdateMessage;
         _messagesTypes[1921] = PrismRemoveMessage;
         _messagesTypes[9017] = ChallengeFightJoinRefusedMessage;
         _messagesTypes[2689] = PrismAttackedMessage;
         _messagesTypes[4128] = PrismAttackResultMessage;
         _messagesTypes[7361] = NuggetsInformationMessage;
         _messagesTypes[6218] = QuestListMessage;
         _messagesTypes[1764] = QuestStartedMessage;
         _messagesTypes[1190] = QuestValidatedMessage;
         _messagesTypes[8772] = QuestObjectiveValidatedMessage;
         _messagesTypes[9356] = QuestStepValidatedMessage;
         _messagesTypes[9861] = QuestStepStartedMessage;
         _messagesTypes[1723] = QuestStepInfoMessage;
         _messagesTypes[758] = FollowedQuestsMessage;
         _messagesTypes[5627] = WatchQuestStepInfoMessage;
         _messagesTypes[1403] = WatchQuestListMessage;
         _messagesTypes[6597] = NotificationListMessage;
         _messagesTypes[8221] = NotificationByServerMessage;
         _messagesTypes[7943] = SubscriptionLimitationMessage;
         _messagesTypes[7990] = SubscriptionZoneMessage;
         _messagesTypes[7497] = GuestLimitationMessage;
         _messagesTypes[9281] = GuestModeMessage;
         _messagesTypes[6306] = ListMapNpcsQuestStatusUpdateMessage;
         _messagesTypes[2908] = NpcGenericActionFailureMessage;
         _messagesTypes[6077] = PortalDialogCreationMessage;
         _messagesTypes[1724] = NpcDialogCreationMessage;
         _messagesTypes[524] = NpcDialogQuestionMessage;
         _messagesTypes[8033] = TaxCollectorDialogQuestionBasicMessage;
         _messagesTypes[6709] = TaxCollectorDialogQuestionExtendedMessage;
         _messagesTypes[8353] = AlliancePrismDialogQuestionMessage;
         _messagesTypes[9057] = EntityTalkMessage;
         _messagesTypes[7435] = JobDescriptionMessage;
         _messagesTypes[2811] = JobLevelUpMessage;
         _messagesTypes[7739] = JobExperienceMultiUpdateMessage;
         _messagesTypes[1215] = JobExperienceUpdateMessage;
         _messagesTypes[1202] = JobExperienceOtherPlayerUpdateMessage;
         _messagesTypes[2314] = JobAllowMultiCraftRequestMessage;
         _messagesTypes[5141] = JobMultiCraftAvailableSkillsMessage;
         _messagesTypes[3390] = JobCrafterDirectoryListMessage;
         _messagesTypes[6629] = JobCrafterDirectorySettingsMessage;
         _messagesTypes[5452] = JobBookSubscriptionMessage;
         _messagesTypes[8338] = JobCrafterDirectoryRemoveMessage;
         _messagesTypes[2994] = JobCrafterDirectoryAddMessage;
         _messagesTypes[389] = JobCrafterDirectoryEntryMessage;
         _messagesTypes[5667] = KamasUpdateMessage;
         _messagesTypes[595] = ObjectGroundAddedMessage;
         _messagesTypes[2845] = ObjectGroundListAddedMessage;
         _messagesTypes[3534] = ObjectGroundRemovedMessage;
         _messagesTypes[823] = ObjectGroundRemovedMultipleMessage;
         _messagesTypes[2012] = InventoryContentMessage;
         _messagesTypes[4015] = WatchInventoryContentMessage;
         _messagesTypes[1608] = ShortcutBarContentMessage;
         _messagesTypes[1938] = ShortcutBarAddErrorMessage;
         _messagesTypes[2825] = ShortcutBarRemoveErrorMessage;
         _messagesTypes[4659] = ShortcutBarSwapErrorMessage;
         _messagesTypes[8442] = ShortcutBarRefreshMessage;
         _messagesTypes[2881] = ShortcutBarRemovedMessage;
         _messagesTypes[2423] = ShortcutBarReplacedMessage;
         _messagesTypes[3442] = MultiTabStorageMessage;
         _messagesTypes[899] = StorageInventoryContentMessage;
         _messagesTypes[212] = StorageKamasUpdateMessage;
         _messagesTypes[44] = StorageObjectUpdateMessage;
         _messagesTypes[4497] = StorageObjectsUpdateMessage;
         _messagesTypes[8692] = StorageObjectRemoveMessage;
         _messagesTypes[1932] = StorageObjectsRemoveMessage;
         _messagesTypes[3055] = SetUpdateMessage;
         _messagesTypes[1907] = InventoryWeightMessage;
         _messagesTypes[6536] = ObjectMovementMessage;
         _messagesTypes[9325] = ObjectAddedMessage;
         _messagesTypes[365] = ObjectsAddedMessage;
         _messagesTypes[7533] = GoldAddedMessage;
         _messagesTypes[7056] = ObjectErrorMessage;
         _messagesTypes[8182] = ObjectDeletedMessage;
         _messagesTypes[6633] = ObjectsDeletedMessage;
         _messagesTypes[2962] = ObjectQuantityMessage;
         _messagesTypes[6590] = ObjectsQuantityMessage;
         _messagesTypes[2227] = ObjectModifiedMessage;
         _messagesTypes[6036] = ObjectJobAddedMessage;
         _messagesTypes[5780] = ObtainedItemMessage;
         _messagesTypes[3479] = ObtainedItemWithBonusMessage;
         _messagesTypes[6766] = LivingObjectMessageMessage;
         _messagesTypes[7722] = SymbioticObjectErrorMessage;
         _messagesTypes[8896] = SymbioticObjectAssociatedMessage;
         _messagesTypes[148] = WrapperObjectErrorMessage;
         _messagesTypes[7212] = WrapperObjectAssociatedMessage;
         _messagesTypes[6951] = MimicryObjectPreviewMessage;
         _messagesTypes[5728] = MimicryObjectErrorMessage;
         _messagesTypes[3202] = MimicryObjectAssociatedMessage;
         _messagesTypes[1460] = InvalidPresetsMessage;
         _messagesTypes[9259] = PresetsMessage;
         _messagesTypes[6865] = ItemForPresetUpdateMessage;
         _messagesTypes[3815] = PresetSavedMessage;
         _messagesTypes[9161] = PresetSaveErrorMessage;
         _messagesTypes[537] = PresetDeleteResultMessage;
         _messagesTypes[1648] = PresetUseResultMessage;
         _messagesTypes[4950] = PresetUseResultWithMissingIdsMessage;
         _messagesTypes[2513] = ExchangeMoneyMovementInformationMessage;
         _messagesTypes[6783] = ExchangeCraftCountModifiedMessage;
         _messagesTypes[8438] = ExchangeObjectMessage;
         _messagesTypes[3343] = ExchangeObjectAddedMessage;
         _messagesTypes[7120] = ExchangeObjectsAddedMessage;
         _messagesTypes[5115] = ExchangeObjectRemovedMessage;
         _messagesTypes[4956] = ExchangeObjectsRemovedMessage;
         _messagesTypes[8162] = ExchangeObjectModifiedMessage;
         _messagesTypes[4538] = ExchangeObjectsModifiedMessage;
         _messagesTypes[2491] = ExchangeObjectPutInBagMessage;
         _messagesTypes[5167] = ExchangeObjectRemovedFromBagMessage;
         _messagesTypes[2026] = ExchangeObjectModifiedInBagMessage;
         _messagesTypes[1116] = ExchangeKamaModifiedMessage;
         _messagesTypes[9468] = ExchangePodsModifiedMessage;
         _messagesTypes[3260] = ExchangeMultiCraftCrafterCanUseHisRessourcesMessage;
         _messagesTypes[6601] = ExchangeRequestedMessage;
         _messagesTypes[88] = ExchangeRequestedTradeMessage;
         _messagesTypes[3414] = ExchangeStartedMessage;
         _messagesTypes[7482] = ExchangeStartedWithPodsMessage;
         _messagesTypes[8705] = ExchangeStartedWithStorageMessage;
         _messagesTypes[5725] = ExchangeStartedWithMultiTabStorageMessage;
         _messagesTypes[7405] = ExchangeBidHouseBuyResultMessage;
         _messagesTypes[6413] = ExchangeBidHouseItemAddOkMessage;
         _messagesTypes[7081] = ExchangeBidHouseItemRemoveOkMessage;
         _messagesTypes[4014] = ExchangeBidHouseGenericItemAddedMessage;
         _messagesTypes[1069] = ExchangeBidHouseGenericItemRemovedMessage;
         _messagesTypes[1990] = ExchangeBidHouseInListAddedMessage;
         _messagesTypes[6092] = ExchangeBidHouseInListUpdatedMessage;
         _messagesTypes[3590] = ExchangeBidHouseInListRemovedMessage;
         _messagesTypes[6665] = ExchangeBidHouseUnsoldItemsMessage;
         _messagesTypes[4016] = ExchangeOfflineSoldItemsMessage;
         _messagesTypes[5230] = ExchangeIsReadyMessage;
         _messagesTypes[6256] = ExchangeStoppedMessage;
         _messagesTypes[8310] = ExchangeErrorMessage;
         _messagesTypes[9150] = ExchangeLeaveMessage;
         _messagesTypes[951] = DecraftResultMessage;
         _messagesTypes[913] = RecycleResultMessage;
         _messagesTypes[1537] = ExchangeStartOkNpcTradeMessage;
         _messagesTypes[9289] = ExchangeStartOkRunesTradeMessage;
         _messagesTypes[5801] = ExchangeStartOkEvolutiveObjectRecycleTradeMessage;
         _messagesTypes[9860] = EvolutiveObjectRecycleResultMessage;
         _messagesTypes[8048] = ExchangeStartOkRecycleTradeMessage;
         _messagesTypes[8657] = ExchangeStartOkNpcShopMessage;
         _messagesTypes[6648] = ExchangeOkMultiCraftMessage;
         _messagesTypes[67] = ExchangeCraftResultMessage;
         _messagesTypes[280] = ExchangeCraftResultWithObjectIdMessage;
         _messagesTypes[3999] = ExchangeCraftResultWithObjectDescMessage;
         _messagesTypes[1948] = ExchangeCraftResultMagicWithObjectDescMessage;
         _messagesTypes[3292] = ExchangeStartedMountStockMessage;
         _messagesTypes[9349] = ExchangeStartedTaxCollectorShopMessage;
         _messagesTypes[6402] = ExchangeStartedBidSellerMessage;
         _messagesTypes[2202] = ExchangeStartedBidBuyerMessage;
         _messagesTypes[9764] = ExchangeBidPriceMessage;
         _messagesTypes[7196] = ExchangeBidPriceForSellerMessage;
         _messagesTypes[706] = ExchangeTypesExchangerDescriptionForUserMessage;
         _messagesTypes[177] = ExchangeTypesItemsExchangerDescriptionForUserMessage;
         _messagesTypes[944] = ExchangeWeightMessage;
         _messagesTypes[5477] = ExchangeTaxCollectorGetMessage;
         _messagesTypes[2274] = ItemNoMoreAvailableMessage;
         _messagesTypes[1649] = ExchangeBuyOkMessage;
         _messagesTypes[8812] = ExchangeSellOkMessage;
         _messagesTypes[2296] = ExchangeWaitingResultMessage;
         _messagesTypes[501] = ExchangeStartOkMountWithOutPaddockMessage;
         _messagesTypes[8655] = ExchangeStartOkMountMessage;
         _messagesTypes[4915] = ExchangeMountStableErrorMessage;
         _messagesTypes[5703] = ExchangeMountsStableAddMessage;
         _messagesTypes[2097] = ExchangeMountsPaddockAddMessage;
         _messagesTypes[2979] = ExchangeMountsStableBornAddMessage;
         _messagesTypes[1534] = ExchangeMountsStableRemoveMessage;
         _messagesTypes[8227] = ExchangeMountsPaddockRemoveMessage;
         _messagesTypes[4122] = ExchangeMountsTakenFromPaddockMessage;
         _messagesTypes[5574] = ExchangeMountFreeFromPaddockMessage;
         _messagesTypes[5529] = ExchangeMountSterilizeFromPaddockMessage;
         _messagesTypes[5585] = ExchangeBidSearchOkMessage;
         _messagesTypes[3953] = ExchangeItemAutoCraftStopedMessage;
         _messagesTypes[1786] = ExchangeStartOkCraftMessage;
         _messagesTypes[9316] = ExchangeStartOkCraftWithInformationMessage;
         _messagesTypes[5320] = ExchangeStartOkMulticraftCrafterMessage;
         _messagesTypes[128] = ExchangeStartOkMulticraftCustomerMessage;
         _messagesTypes[4924] = ExchangeCrafterJobLevelupMessage;
         _messagesTypes[2386] = ExchangeStartOkJobIndexMessage;
         _messagesTypes[2288] = ExchangeCraftPaymentModifiedMessage;
         _messagesTypes[255] = UpdateMountCharacteristicsMessage;
         _messagesTypes[4235] = ExchangeStartedTaxCollectorEquipmentMessage;
         _messagesTypes[3885] = ObjectAveragePricesErrorMessage;
         _messagesTypes[9290] = ObjectAveragePricesMessage;
         _messagesTypes[1096] = PurchasableDialogMessage;
         _messagesTypes[2128] = AccountHouseMessage;
         _messagesTypes[8296] = HousePropertiesMessage;
         _messagesTypes[4144] = HouseBuyResultMessage;
         _messagesTypes[27] = HouseSellingUpdateMessage;
         _messagesTypes[9263] = HouseToSellListMessage;
         _messagesTypes[223] = HouseGuildNoneMessage;
         _messagesTypes[3919] = HouseGuildRightsMessage;
         _messagesTypes[765] = PaddockBuyResultMessage;
         _messagesTypes[5635] = PaddockPropertiesMessage;
         _messagesTypes[7797] = PaddockSellBuyDialogMessage;
         _messagesTypes[9266] = GameDataPlayFarmObjectAnimationMessage;
         _messagesTypes[9204] = PaddockToSellListMessage;
         _messagesTypes[9458] = HavenBagRoomUpdateMessage;
         _messagesTypes[4278] = HavenBagPackListMessage;
         _messagesTypes[7016] = EditHavenBagStartMessage;
         _messagesTypes[2552] = EditHavenBagFinishedMessage;
         _messagesTypes[4338] = HavenBagDailyLoteryMessage;
         _messagesTypes[4362] = HavenBagFurnituresMessage;
         _messagesTypes[5660] = MapComplementaryInformationsDataInHavenBagMessage;
         _messagesTypes[1314] = HavenBagPermissionsUpdateMessage;
         _messagesTypes[6322] = InviteInHavenBagClosedMessage;
         _messagesTypes[1881] = InviteInHavenBagMessage;
         _messagesTypes[4145] = InviteInHavenBagOfferMessage;
         _messagesTypes[5176] = MountSterilizedMessage;
         _messagesTypes[6651] = MountReleasedMessage;
         _messagesTypes[2577] = MountRenamedMessage;
         _messagesTypes[2899] = MountXpRatioMessage;
         _messagesTypes[7683] = MountDataMessage;
         _messagesTypes[7915] = MountDataErrorMessage;
         _messagesTypes[7145] = MountSetMessage;
         _messagesTypes[6291] = MountUnSetMessage;
         _messagesTypes[3799] = MountEquipedErrorMessage;
         _messagesTypes[328] = MountRidingMessage;
         _messagesTypes[2233] = GameDataPaddockObjectRemoveMessage;
         _messagesTypes[996] = GameDataPaddockObjectAddMessage;
         _messagesTypes[2735] = GameDataPaddockObjectListAddMessage;
         _messagesTypes[4678] = MountEmoteIconUsedOkMessage;
         _messagesTypes[8686] = LockableShowCodeDialogMessage;
         _messagesTypes[756] = LockableCodeResultMessage;
         _messagesTypes[6940] = LockableStateUpdateAbstractMessage;
         _messagesTypes[2441] = LockableStateUpdateHouseDoorMessage;
         _messagesTypes[491] = LockableStateUpdateStorageMessage;
         _messagesTypes[556] = DocumentReadingBeginMessage;
         _messagesTypes[3895] = OpenGuideBookMessage;
         _messagesTypes[7011] = TitlesAndOrnamentsListMessage;
         _messagesTypes[478] = TitleGainedMessage;
         _messagesTypes[541] = TitleLostMessage;
         _messagesTypes[2340] = OrnamentGainedMessage;
         _messagesTypes[9671] = OrnamentLostMessage;
         _messagesTypes[5032] = TitleSelectedMessage;
         _messagesTypes[7277] = TitleSelectErrorMessage;
         _messagesTypes[439] = OrnamentSelectedMessage;
         _messagesTypes[5458] = OrnamentSelectErrorMessage;
         _messagesTypes[782] = ContactLookMessage;
         _messagesTypes[4487] = ContactLookErrorMessage;
         _messagesTypes[3103] = SocialNoticeMessage;
         _messagesTypes[881] = BulletinMessage;
         _messagesTypes[8254] = SocialNoticeSetErrorMessage;
         _messagesTypes[5836] = AccessoryPreviewErrorMessage;
         _messagesTypes[8720] = AccessoryPreviewMessage;
         _messagesTypes[7406] = HaapiBufferListMessage;
         _messagesTypes[7136] = HaapiConfirmationMessage;
         _messagesTypes[487] = HaapiValidationMessage;
         _messagesTypes[4967] = HaapiBuyValidationMessage;
         _messagesTypes[4529] = HaapiApiKeyMessage;
         _messagesTypes[7531] = HaapiShopApiKeyMessage;
         _messagesTypes[6002] = FinishMoveListMessage;
         _messagesTypes[8078] = TreasureHuntShowLegendaryUIMessage;
         _messagesTypes[6903] = TreasureHuntRequestAnswerMessage;
         _messagesTypes[2986] = TreasureHuntMessage;
         _messagesTypes[6113] = TreasureHuntFinishedMessage;
         _messagesTypes[617] = TreasureHuntDigRequestAnswerMessage;
         _messagesTypes[3228] = TreasureHuntDigRequestAnswerFailedMessage;
         _messagesTypes[3593] = TreasureHuntFlagRequestAnswerMessage;
         _messagesTypes[8373] = TreasureHuntAvailableRetryCountUpdateMessage;
         _messagesTypes[7262] = BreachStateMessage;
         _messagesTypes[2322] = BreachCharactersMessage;
         _messagesTypes[4966] = BreachBonusMessage;
         _messagesTypes[7779] = BreachBudgetMessage;
         _messagesTypes[5933] = BreachSavedMessage;
         _messagesTypes[8724] = BreachBranchesMessage;
         _messagesTypes[9196] = BreachRewardsMessage;
         _messagesTypes[384] = BreachRewardBoughtMessage;
         _messagesTypes[9853] = BreachInvitationOfferMessage;
         _messagesTypes[9038] = BreachInvitationResponseMessage;
         _messagesTypes[5347] = BreachInvitationCloseMessage;
         _messagesTypes[8683] = BreachKickResponseMessage;
         _messagesTypes[9094] = AnomalySubareaInformationResponseMessage;
         _messagesTypes[8197] = AlignmentWarEffortProgressionMessage;
         _messagesTypes[1920] = CharacterAlignmentWarEffortProgressionMessage;
         _messagesTypes[8313] = AlignmentWarEffortDonatePreviewMessage;
         _messagesTypes[7579] = AlignmentWarEffortDonationResultMessage;
         _messagesTypes[4755] = HaapiTokenMessage;
         _messagesTypes[8765] = HaapiAuthErrorMessage;
         _messagesTypes[4839] = HaapiSessionMessage;
         _messagesTypes[2498] = DebtsUpdateMessage;
         _messagesTypes[5718] = DebtsDeleteMessage;
         _messagesTypes[6457] = ActivitySuggestionsMessage;
         _messagesTypes[3851] = AlterationsMessage;
         _messagesTypes[2990] = AlterationAddedMessage;
         _messagesTypes[660] = AlterationRemovedMessage;
         _messagesTypes[2645] = AlterationsUpdatedMessage;
         _unpackModes[6504] = UnpackMode.ASYNC;
      }
      
      public function MessageReceiver()
      {
         super();
      }
      
      public static function register() : void
      {
         StoreDataManager.getInstance().registerClass(new PaginationAnswerAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NetworkDataContainerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ProtocolRequired(),true,true);
         StoreDataManager.getInstance().registerClass(new LoginQueueStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QueueStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ConsoleMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ConsoleEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ConsoleCommandsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HelloConnectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CredentialsAcknowledgementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NicknameRegistrationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountLinkRequiredMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NicknameRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NicknameAcceptedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ForceAccountErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ForceAccountStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationSuccessWithLoginTokenMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationFailedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationFailedBannedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentificationFailedForBadVersionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServersListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SelectedServerDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SelectedServerDataExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SelectedServerRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceSearchErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceServerListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MigratedServerListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HelloGameMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AuthenticationTicketAcceptedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AuthenticationTicketRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlreadyConnectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountLoggingKickedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ReloginTokenStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSettingsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerOptionalFeaturesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountCapabilitiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TrustStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountInformationsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountSubscriptionElapsedDurationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CheckFileRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RawDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionItemListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionItemAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionItemConsumedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCanBeCreatedResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCreationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterDeletionPrepareMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterDeletionErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterNameSuggestionFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharactersListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharactersListWithRemodelingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharactersListErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterSelectedSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterSelectedForceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterSelectedErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PopupWarningMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PopupWarningClosedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicDateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicTimeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlmanachCalendarDateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicNoOperationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicAckMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SystemMessageDisplayMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TextInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OnConnectionEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SetCharacterRestrictionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerExperienceModificatorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCapabilitiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterLoadingCompleteMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextCreateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextCreateErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextDestroyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveElementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveElementWithEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRemoveMultipleElementsWithEventsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextMoveElementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextMoveMultipleElementsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextRefreshEntityLookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapNoMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameCautiousMapMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameMapChangeOrientationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameEntityDispositionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameEntitiesDispositionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameEntityDispositionErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRefreshMonsterBoostsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatusUpdateErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicWhoIsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicWhoIsNoMatchMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NumericWhoIsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicPongMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicLatencyStatsRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SequenceNumberRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CurrentServerStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CinematicMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DumpedEntityStatsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebugHighlightCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebugClearHighlightCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebugInClientMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ClientYouAreDrunkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DisplayNumericalValuePaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CurrentMapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CurrentMapInstanceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportOnSameMapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapFightCountMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRunningFightListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapRunningFightDetailsExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapObstacleUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHouseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsWithCoordsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SubareaRewardRateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachEnterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachTeleportResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachRoomLockedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachRoomUnlockResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachExitResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsBreachMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachGameFightEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AnomalyStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AnomalyOpenedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsAnomalyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapFightStartPositionsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowMultipleActorsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowActorWithEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterStatsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FighterStatsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ApplySpellModifierMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RemoveSpellModifierMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterLevelUpMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterExperienceGainMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterLevelUpInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateLifePointsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LifePointsRegenBeginMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LifePointsRegenEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerLifeStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGameOverMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayFightRequestCanceledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayAggressionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyRequestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPlayerFightFriendlyAnsweredMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaRegistrationStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFightPropositionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaFighterStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaSwitchToFightServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaSwitchToGameServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaInvitationCandidatesAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaLeagueRewardsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaPlayerBehavioursMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayArenaRegistrationWarningMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMonsterAngryAtPlayerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMonsterNotAngryAtPlayerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayShowChallengeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayRemoveChallengeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlaySpellAnimMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedObjectUseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayDelayedActionFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShowCellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShowCellSpectatorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightStartingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightSpectatorJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementPossiblePositionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsCancelledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPlacementSwapPositionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightOptionStateUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightUpdateTeamMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightRemoveTeamMemberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightHumanReadyStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightSpectateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightResumeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightResumeWithSlavesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightNewRoundMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightNewWaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnStartPlayingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnResumeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightPauseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SlaveSwitchContextMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SlaveNoLongerControledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RefreshCharacterStatsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnReadyRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightSynchronizeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTurnEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightShowFighterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightRefreshFighterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightShowFighterRandomStaticPoseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ArenaFighterLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ArenaFighterIdleMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SequenceStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SequenceEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractGameActionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionNoopMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionSpamMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractGameActionWithAckMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightNoSpellCastMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractGameActionFightTargetedAbilityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSpellCastMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightCloseCombatMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionUpdateEffectTriggerCountMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightInvisibleDetectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightPointsVariationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTackledMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDeathMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightKillMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightVanishMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSpellCooldownVariationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSpellImmunityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsGainMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightLifePointsLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightLifeAndShieldPointsLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellableEffectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightReflectSpellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightReduceDamagesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightReflectDamagesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDodgePointLossMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSlideMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTeleportOnSameMapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightExchangePositionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellEffectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDispellSpellMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightModifyEffectsDurationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTriggerEffectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightStealKamaMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightChangeLookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightInvisibilityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightSummonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightMultipleSummonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightMarkCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightUnmarkCellsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightTriggerGlyphTrapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightActivateGlyphTrapMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightCarryCharacterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightThrowCharacterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameActionFightDropCharacterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmoteListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmoteAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmoteRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayMassiveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EmotePlayErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatSmileyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatCommunityChannelCommunityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LocalizedChatSmileyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MoodSmileyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MoodSmileyUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatSmileyExtraPackListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatAbstractServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatKolizeumServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatAdminServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerWithObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerCopyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatServerCopyWithObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChatErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EnabledChannelsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChannelEnablingChangeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpellListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ForgettableSpellListUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ForgettableSpellDeleteMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ForgettableSpellEquipmentSlotsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LeaveDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PauseDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveUseErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveUsedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveUseEndedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveMapUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StatedMapUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StatedElementUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ZaapRespawnUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportDestinationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ZaapDestinationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new KnownZaapListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportBuddiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportBuddiesRequestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportToBuddyOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportToBuddyCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportPlayerOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TeleportPlayerCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GroupTeleportPlayerOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GroupTeleportPlayerCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpellVariantActivationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StatsUpgradeResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeTargetsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeNumberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeProposalMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeModSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeBonusChoiceSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EntityInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EntitiesInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementDetailedListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementAlmostFinishedDetailedListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementFinishedInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementRewardSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementRewardErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendGuildWarnOnAchievementCompleteStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonKeyRingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonKeyRingUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMapPlayersAgressableStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateSelfAgressableStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlignmentRankUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassResetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassUpdatePartyMemberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AtlasPointInformationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CompassUpdatePvpSeekMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPartyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPartyEventMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyModifiableStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationDungeonDetailsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationCancelledForGuestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyCancelInvitationNotificationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyRefuseInvitationNotificationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyCannotJoinErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyJoinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNewGuestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNewMemberMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyUpdateLightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyEntityUpdateLightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberEjectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLeaderUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyFollowStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLocateMembersMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyKickedByMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyRestrictedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyLoyaltyStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPartyMemberInFightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInStandardFightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInBreachFightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNameUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyNameSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderAvailableDungeonsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderListenErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRoomContentUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterSuccessMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DungeonPartyFinderRegisterErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ContactAddFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpouseStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintancesListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SpouseInformationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendAddFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendDeleteResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendWarnOnConnectionStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WarnOnPermaDeathStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendWarnOnLevelGainStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendStatusShareStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredAddFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredDeleteResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new KohUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new KothEndMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AreaFightModificatorUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ClientUIOpenedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ClientUIOpenedByObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLogbookInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildChestTabContributionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildChestTabLastContributionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildChestTabContributionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildSummaryMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildCreationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildModificationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildCreationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildModificationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInvitedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecruterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInvitationStateRecrutedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildJoinedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMemberOnlineStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsGeneralMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsMembersMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsMemberUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformationsPaddocksMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMemberLeavingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLeftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMembershipMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLevelUpMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildHousesInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildHouseUpdateInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildHouseRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPaddockBoughtMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPaddockRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMotdMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildMotdSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildBulletinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildBulletinSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildRanksMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceCreationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceModificationStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceCreationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceModificationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMemberOnlineStatusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceApplicationDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePlayerApplicationAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePlayerApplicationInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePlayerNoApplicationInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceApplicationIsAnsweredMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceListApplicationAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceListApplicationModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceApplicationReceivedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceApplicationPresenceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceRecruitmentInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceRecruitmentInvalidateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInvitedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInvitationStateRecruterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInvitationStateRecrutedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceJoinedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMemberLeavingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceLeftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMembershipMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceSummaryMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactsErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceRanksMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMemberInformationUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePartialListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInsiderInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFightInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFightStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFightFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFightPhaseUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFightFighterAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFightFighterRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMotdMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceMotdSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceBulletinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceBulletinSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TopTaxCollectorListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorStateUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorAttackedResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorHarvestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorMovementsOfflineMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorEquipmentUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ConfirmationOfListeningTaxCollectorUpdatesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorOrderedSpellUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorPresetsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorPresetSpellUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RecruitmentInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildRecruitmentInvalidateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildApplicationDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerApplicationAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerApplicationInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerNoApplicationInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildApplicationIsAnsweredMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildListApplicationAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildListApplicationModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildApplicationReceivedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildApplicationPresenceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ListenersOfSynchronizedStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AddListenerOnSynchronizedStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RemoveListenerOnSynchronizedStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismAddOrUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeFightJoinRefusedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismAttackedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismAttackResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NuggetsInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestValidatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestObjectiveValidatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStepValidatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStepStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestStepInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FollowedQuestsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WatchQuestStepInfoMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WatchQuestListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NotificationListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NotificationByServerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SubscriptionLimitationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SubscriptionZoneMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuestLimitationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GuestModeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ListMapNpcsQuestStatusUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NpcGenericActionFailureMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PortalDialogCreationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NpcDialogCreationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new NpcDialogQuestionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionBasicMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorDialogQuestionExtendedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePrismDialogQuestionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EntityTalkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobDescriptionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobLevelUpMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobExperienceMultiUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobExperienceUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobExperienceOtherPlayerUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobAllowMultiCraftRequestMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobMultiCraftAvailableSkillsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectorySettingsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobBookSubscriptionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new JobCrafterDirectoryEntryMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new KamasUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundListAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectGroundRemovedMultipleMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InventoryContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WatchInventoryContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarAddErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarRemoveErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarSwapErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarRefreshMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutBarReplacedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MultiTabStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageInventoryContentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageKamasUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new StorageObjectsRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SetUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InventoryWeightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectMovementMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectsAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GoldAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectsDeletedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectQuantityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectsQuantityMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectJobAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObtainedItemMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObtainedItemWithBonusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LivingObjectMessageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SymbioticObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SymbioticObjectAssociatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WrapperObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new WrapperObjectAssociatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MimicryObjectPreviewMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MimicryObjectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MimicryObjectAssociatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InvalidPresetsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ItemForPresetUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetSavedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetSaveErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetDeleteResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetUseResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetUseResultWithMissingIdsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMoneyMovementInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftCountModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectsAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectsRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectsModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectPutInBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectRemovedFromBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeObjectModifiedInBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeKamaModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangePodsModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeRequestedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeRequestedTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedWithPodsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedWithStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedWithMultiTabStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseBuyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemAddOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseItemRemoveOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseGenericItemRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListUpdatedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseInListRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidHouseUnsoldItemsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeOfflineSoldItemsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeIsReadyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStoppedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeLeaveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DecraftResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new RecycleResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkRunesTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkEvolutiveObjectRecycleTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EvolutiveObjectRecycleResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkRecycleTradeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkNpcShopMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeOkMultiCraftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectIdMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultWithObjectDescMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftResultMagicWithObjectDescMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedMountStockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedTaxCollectorShopMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedBidSellerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedBidBuyerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidPriceMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidPriceForSellerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeTypesExchangerDescriptionForUserMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeTypesItemsExchangerDescriptionForUserMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeWeightMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeTaxCollectorGetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ItemNoMoreAvailableMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBuyOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeSellOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeWaitingResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountWithOutPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMountMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountStableErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsStableAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsPaddockAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsStableBornAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsStableRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsPaddockRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountsTakenFromPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountFreeFromPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeMountSterilizeFromPaddockMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeBidSearchOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeItemAutoCraftStopedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkCraftWithInformationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCrafterMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkMulticraftCustomerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCrafterJobLevelupMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartOkJobIndexMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeCraftPaymentModifiedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountCharacteristicsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ExchangeStartedTaxCollectorEquipmentMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectAveragePricesErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectAveragePricesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PurchasableDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountHouseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HousePropertiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseBuyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseSellingUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseToSellListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseGuildNoneMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseGuildRightsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockBuyResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockPropertiesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockSellBuyDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPlayFarmObjectAnimationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockToSellListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagRoomUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagPackListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EditHavenBagStartMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new EditHavenBagFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagDailyLoteryMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagFurnituresMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MapComplementaryInformationsDataInHavenBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HavenBagPermissionsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InviteInHavenBagClosedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InviteInHavenBagMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new InviteInHavenBagOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountSterilizedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountReleasedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountRenamedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountXpRatioMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountDataMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountDataErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountSetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountUnSetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountEquipedErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountRidingMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectRemoveMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new GameDataPaddockObjectListAddMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new MountEmoteIconUsedOkMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableShowCodeDialogMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableCodeResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableStateUpdateAbstractMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableStateUpdateHouseDoorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new LockableStateUpdateStorageMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DocumentReadingBeginMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OpenGuideBookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitlesAndOrnamentsListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleGainedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentGainedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentLostMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TitleSelectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentSelectedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new OrnamentSelectErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ContactLookMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ContactLookErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SocialNoticeMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BulletinMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new SocialNoticeSetErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccessoryPreviewErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AccessoryPreviewMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiBufferListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiConfirmationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiValidationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiBuyValidationMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiApiKeyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiShopApiKeyMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new FinishMoveListMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntShowLegendaryUIMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntRequestAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntFinishedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntDigRequestAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntDigRequestAnswerFailedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntFlagRequestAnswerMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntAvailableRetryCountUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachStateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachCharactersMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBonusMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBudgetMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachSavedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBranchesMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachRewardsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachRewardBoughtMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachInvitationOfferMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachInvitationResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachInvitationCloseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachKickResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AnomalySubareaInformationResponseMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlignmentWarEffortProgressionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterAlignmentWarEffortProgressionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlignmentWarEffortDonatePreviewMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlignmentWarEffortDonationResultMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiTokenMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiAuthErrorMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new HaapiSessionMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebtsUpdateMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new DebtsDeleteMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new ActivitySuggestionsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlterationsMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlterationAddedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlterationRemovedMessage(),true,true);
         StoreDataManager.getInstance().registerClass(new AlterationsUpdatedMessage(),true,true);
      }
      
      public function parse(input:ICustomDataInput, messageId:uint, messageLength:uint) : INetworkMessage
      {
         var messageType:Class = _messagesTypes[messageId];
         if(!messageType)
         {
            _log.warn("Unknown packet received (ID " + messageId + ", length " + messageLength + ")");
            return null;
         }
         var message:INetworkMessage = new messageType();
         message.unpack(input,messageLength);
         message.unpacked = true;
         return message;
      }
      
      public function parseAsync(input:ICustomDataInput, messageId:uint, messageLength:uint, callback:Function) : INetworkMessage
      {
         var messageType:Class = _messagesTypes[messageId];
         if(!messageType)
         {
            _log.warn("Unknown packet received (ID " + messageId + ", length " + messageLength + ")");
            return null;
         }
         var message:INetworkMessage = new messageType();
         message.unpacked = false;
         callback(message,message.unpackAsync(input,messageLength));
         return message;
      }
      
      public function getUnpackMode(messageId:uint) : uint
      {
         return messageId in _unpackModes ? uint(_unpackModes[messageId]) : uint(UnpackMode.DEFAULT);
      }
   }
}
