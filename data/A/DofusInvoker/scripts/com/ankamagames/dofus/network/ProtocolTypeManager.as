package com.ankamagames.dofus.network
{
   import com.ankamagames.dofus.network.types.common.AbstractPlayerSearchInformation;
   import com.ankamagames.dofus.network.types.common.PlayerSearchCharacterNameInformation;
   import com.ankamagames.dofus.network.types.common.PlayerSearchTagInformation;
   import com.ankamagames.dofus.network.types.common.basic.StatisticData;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataBoolean;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataByte;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataInt;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataShort;
   import com.ankamagames.dofus.network.types.common.basic.StatisticDataString;
   import com.ankamagames.dofus.network.types.game.achievement.AchievementAchieved;
   import com.ankamagames.dofus.network.types.game.achievement.AchievementAchievedRewardable;
   import com.ankamagames.dofus.network.types.game.actions.fight.AbstractFightDispellableEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightDetailedTemporaryBoostEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostStateEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporaryBoostWeaponDamagesEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporarySpellBoostEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTemporarySpellImmunityEffect;
   import com.ankamagames.dofus.network.types.game.actions.fight.FightTriggeredEffect;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstant;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantInteger;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantLong;
   import com.ankamagames.dofus.network.types.game.approach.ServerSessionConstantString;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristic;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristicDetailed;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterCharacteristicValue;
   import com.ankamagames.dofus.network.types.game.character.characteristic.CharacterUsableCharacteristicDetailed;
   import com.ankamagames.dofus.network.types.game.character.choice.CharacterBaseInformations;
   import com.ankamagames.dofus.network.types.game.character.choice.CharacterHardcoreOrEpicInformations;
   import com.ankamagames.dofus.network.types.game.character.debt.DebtInformation;
   import com.ankamagames.dofus.network.types.game.character.debt.KamaDebtInformation;
   import com.ankamagames.dofus.network.types.game.character.status.PlayerStatus;
   import com.ankamagames.dofus.network.types.game.character.status.PlayerStatusExtended;
   import com.ankamagames.dofus.network.types.game.collector.tax.TaxCollectorComplementaryInformations;
   import com.ankamagames.dofus.network.types.game.collector.tax.TaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.collector.tax.TaxCollectorLootInformations;
   import com.ankamagames.dofus.network.types.game.collector.tax.TaxCollectorWaitingForHelpInformations;
   import com.ankamagames.dofus.network.types.game.context.EntityDispositionInformations;
   import com.ankamagames.dofus.network.types.game.context.FightEntityDispositionInformations;
   import com.ankamagames.dofus.network.types.game.context.GameContextActorInformations;
   import com.ankamagames.dofus.network.types.game.context.GameContextActorPositionInformations;
   import com.ankamagames.dofus.network.types.game.context.GameRolePlayTaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.context.IdentifiedEntityDispositionInformations;
   import com.ankamagames.dofus.network.types.game.context.MapCoordinates;
   import com.ankamagames.dofus.network.types.game.context.MapCoordinatesAndId;
   import com.ankamagames.dofus.network.types.game.context.MapCoordinatesExtended;
   import com.ankamagames.dofus.network.types.game.context.TaxCollectorStaticInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.BaseSpawnMonsterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.FightAllianceTeamInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultAdditionalData;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultExperienceData;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultFighterListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultMutantListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultPlayerListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultPvpData;
   import com.ankamagames.dofus.network.types.game.context.fight.FightResultTaxCollectorListEntry;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberEntityInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberMonsterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberTaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.FightTeamMemberWithAllianceCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameContextBasicSpawnInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameContextSummonsInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightAIInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightCharacteristics;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightEntityInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterEntityLightInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterMonsterLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterNamedInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterNamedLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightFighterTaxCollectorLightInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightMonsterInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightMonsterWithAlignmentInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightMutantInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.GameFightTaxCollectorInformations;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnCharacterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnCompanionInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnMonsterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.SpawnScaledMonsterInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.challenge.ChallengeTargetInformation;
   import com.ankamagames.dofus.network.types.game.context.fight.challenge.ChallengeTargetWithAttackerInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.AllianceInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.BasicAllianceInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.BasicGuildInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.BasicNamedAllianceInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayActorInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayCharacterInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayGroupMonsterInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayGroupMonsterWaveInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayHumanoidInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMountInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayMutantInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNamedActorInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNpcInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayNpcWithQuestInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayPortalInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayPrismInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GameRolePlayTreasureHintInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GroupMonsterStaticInformationsWithAlternatives;
   import com.ankamagames.dofus.network.types.game.context.roleplay.GuildInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOption;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionAlliance;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionEmote;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionFollowers;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionGuild;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionObjectUse;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionOrnament;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionSkillUse;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionSpeedMultiplier;
   import com.ankamagames.dofus.network.types.game.context.roleplay.HumanOptionTitle;
   import com.ankamagames.dofus.network.types.game.context.roleplay.breach.BreachBranch;
   import com.ankamagames.dofus.network.types.game.context.roleplay.breach.ExtendedBreachBranch;
   import com.ankamagames.dofus.network.types.game.context.roleplay.breach.ExtendedLockedBreachBranch;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyInvitationMemberInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyMemberArenaInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.PartyMemberInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.entity.PartyEntityBaseInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.party.entity.PartyEntityMemberInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestActiveDetailedInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestActiveInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformations;
   import com.ankamagames.dofus.network.types.game.context.roleplay.quest.QuestObjectiveInformationsWithCompletion;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.PortalInformation;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStep;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepDig;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFight;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirection;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirectionToHint;
   import com.ankamagames.dofus.network.types.game.context.roleplay.treasureHunt.TreasureHuntStepFollowDirectionToPOI;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffect;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectCreature;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDate;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDice;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectDuration;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectInteger;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectLadder;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectMinMax;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectMount;
   import com.ankamagames.dofus.network.types.game.data.items.effects.ObjectEffectString;
   import com.ankamagames.dofus.network.types.game.friend.AcquaintanceInformation;
   import com.ankamagames.dofus.network.types.game.friend.AcquaintanceOnlineInformation;
   import com.ankamagames.dofus.network.types.game.friend.FriendInformations;
   import com.ankamagames.dofus.network.types.game.friend.FriendOnlineInformations;
   import com.ankamagames.dofus.network.types.game.friend.FriendSpouseInformations;
   import com.ankamagames.dofus.network.types.game.friend.FriendSpouseOnlineInformations;
   import com.ankamagames.dofus.network.types.game.friend.IgnoredInformations;
   import com.ankamagames.dofus.network.types.game.friend.IgnoredOnlineInformations;
   import com.ankamagames.dofus.network.types.game.guild.logbook.GuildLogbookEntryBasicInformation;
   import com.ankamagames.dofus.network.types.game.guild.logbook.chest.GuildLogbookChestActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildLevelUpActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPaddockActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPlayerFlowActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildPlayerRankUpdateActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildRankActivity;
   import com.ankamagames.dofus.network.types.game.guild.logbook.global.GuildUnlockNewTabActivity;
   import com.ankamagames.dofus.network.types.game.house.AccountHouseInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseGuildedInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseInformationsForGuild;
   import com.ankamagames.dofus.network.types.game.house.HouseInformationsInside;
   import com.ankamagames.dofus.network.types.game.house.HouseInstanceInformations;
   import com.ankamagames.dofus.network.types.game.house.HouseOnMapInformations;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElement;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementNamedSkill;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementSkill;
   import com.ankamagames.dofus.network.types.game.interactive.InteractiveElementWithAgeBonus;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescription;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionCollect;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionCraft;
   import com.ankamagames.dofus.network.types.game.interactive.skill.SkillActionDescriptionTimed;
   import com.ankamagames.dofus.network.types.game.mount.UpdateMountBooleanCharacteristic;
   import com.ankamagames.dofus.network.types.game.mount.UpdateMountCharacteristic;
   import com.ankamagames.dofus.network.types.game.mount.UpdateMountIntegerCharacteristic;
   import com.ankamagames.dofus.network.types.game.paddock.PaddockBuyableInformations;
   import com.ankamagames.dofus.network.types.game.paddock.PaddockGuildedInformations;
   import com.ankamagames.dofus.network.types.game.presets.EntitiesPreset;
   import com.ankamagames.dofus.network.types.game.presets.ForgettableSpellsPreset;
   import com.ankamagames.dofus.network.types.game.presets.FullStatsPreset;
   import com.ankamagames.dofus.network.types.game.presets.IconNamedPreset;
   import com.ankamagames.dofus.network.types.game.presets.ItemsPreset;
   import com.ankamagames.dofus.network.types.game.presets.Preset;
   import com.ankamagames.dofus.network.types.game.presets.PresetsContainerPreset;
   import com.ankamagames.dofus.network.types.game.presets.SpellsPreset;
   import com.ankamagames.dofus.network.types.game.presets.StatsPreset;
   import com.ankamagames.dofus.network.types.game.prism.AllianceInsiderPrismInformation;
   import com.ankamagames.dofus.network.types.game.prism.AlliancePrismInformation;
   import com.ankamagames.dofus.network.types.game.prism.PrismGeolocalizedInformation;
   import com.ankamagames.dofus.network.types.game.prism.PrismInformation;
   import com.ankamagames.dofus.network.types.game.shortcut.Shortcut;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutEmote;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutEntitiesPreset;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObject;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectItem;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutObjectPreset;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutSmiley;
   import com.ankamagames.dofus.network.types.game.shortcut.ShortcutSpell;
   import com.ankamagames.dofus.network.types.game.social.AbstractSocialGroupInfos;
   import com.ankamagames.dofus.network.types.game.social.AllianceFactSheetInformation;
   import com.ankamagames.dofus.network.types.game.social.GuildFactSheetInformations;
   import com.ankamagames.dofus.network.types.game.social.GuildInsiderFactSheetInformations;
   import com.ankamagames.dofus.network.types.game.surrender.SurrenderAccepted;
   import com.ankamagames.dofus.network.types.game.surrender.SurrenderRefused;
   import com.ankamagames.dofus.network.types.game.surrender.SurrenderRefusedBeforeTurn;
   import com.ankamagames.dofus.network.types.game.surrender.SurrenderRefusedBeforeVote;
   import com.ankamagames.dofus.network.types.game.surrender.SurrenderResponse;
   import com.ankamagames.dofus.network.types.game.surrender.vote.SurrenderVoteAccepted;
   import com.ankamagames.dofus.network.types.game.surrender.vote.SurrenderVoteRefused;
   import com.ankamagames.dofus.network.types.game.surrender.vote.SurrenderVoteRefusedAlreadyAsked;
   import com.ankamagames.dofus.network.types.game.surrender.vote.SurrenderVoteRefusedBeforeTurn;
   import com.ankamagames.dofus.network.types.game.surrender.vote.SurrenderVoteRefusedWaitBetweenVotes;
   import com.ankamagames.dofus.network.types.game.surrender.vote.SurrenderVoteResponse;
   import com.ankamagames.jerakine.managers.StoreDataManager;
   import flash.utils.Dictionary;
   
   public class ProtocolTypeManager
   {
      
      private static const _typesTypes:Dictionary = new Dictionary();
      
      {
         _typesTypes[4367] = CharacterBaseInformations;
         _typesTypes[9391] = PartyMemberInformations;
         _typesTypes[2056] = PartyMemberArenaInformations;
         _typesTypes[3577] = PartyInvitationMemberInformations;
         _typesTypes[3983] = CharacterHardcoreOrEpicInformations;
         _typesTypes[4052] = ChallengeTargetInformation;
         _typesTypes[540] = ChallengeTargetWithAttackerInformation;
         _typesTypes[2447] = EntityDispositionInformations;
         _typesTypes[619] = IdentifiedEntityDispositionInformations;
         _typesTypes[3736] = FightEntityDispositionInformations;
         _typesTypes[6837] = AbstractSocialGroupInfos;
         _typesTypes[2995] = BasicAllianceInformations;
         _typesTypes[5416] = BasicNamedAllianceInformations;
         _typesTypes[1197] = AllianceInformation;
         _typesTypes[6340] = AllianceFactSheetInformation;
         _typesTypes[4606] = BasicGuildInformations;
         _typesTypes[7929] = GuildInformations;
         _typesTypes[643] = GuildFactSheetInformations;
         _typesTypes[9836] = GuildInsiderFactSheetInformations;
         _typesTypes[643] = GuildFactSheetInformations;
         _typesTypes[9836] = GuildInsiderFactSheetInformations;
         _typesTypes[6340] = AllianceFactSheetInformation;
         _typesTypes[9281] = PrismGeolocalizedInformation;
         _typesTypes[65] = PrismInformation;
         _typesTypes[4594] = AlliancePrismInformation;
         _typesTypes[7229] = AllianceInsiderPrismInformation;
         _typesTypes[6701] = CharacterCharacteristic;
         _typesTypes[901] = CharacterCharacteristicDetailed;
         _typesTypes[1943] = CharacterUsableCharacteristicDetailed;
         _typesTypes[3951] = CharacterCharacteristicValue;
         _typesTypes[9810] = FightTeamMemberInformations;
         _typesTypes[4535] = FightTeamMemberCharacterInformations;
         _typesTypes[793] = FightTeamMemberWithAllianceCharacterInformations;
         _typesTypes[4832] = FightTeamMemberTaxCollectorInformations;
         _typesTypes[7397] = FightTeamMemberMonsterInformations;
         _typesTypes[5854] = FightTeamMemberEntityInformation;
         _typesTypes[3291] = FightTeamInformations;
         _typesTypes[8585] = FightAllianceTeamInformations;
         _typesTypes[714] = GameFightCharacteristics;
         _typesTypes[3594] = FightResultListEntry;
         _typesTypes[613] = FightResultFighterListEntry;
         _typesTypes[6507] = FightResultTaxCollectorListEntry;
         _typesTypes[6813] = FightResultPlayerListEntry;
         _typesTypes[2795] = FightResultMutantListEntry;
         _typesTypes[8078] = FightResultAdditionalData;
         _typesTypes[7233] = FightResultPvpData;
         _typesTypes[5571] = FightResultExperienceData;
         _typesTypes[4079] = AbstractFightDispellableEffect;
         _typesTypes[2521] = FightTemporaryBoostEffect;
         _typesTypes[4574] = FightTemporaryBoostStateEffect;
         _typesTypes[7119] = FightTemporarySpellBoostEffect;
         _typesTypes[2061] = FightDetailedTemporaryBoostEffect;
         _typesTypes[9695] = FightTemporaryBoostWeaponDamagesEffect;
         _typesTypes[3450] = FightTemporarySpellImmunityEffect;
         _typesTypes[5487] = FightTriggeredEffect;
         _typesTypes[7605] = ObjectEffect;
         _typesTypes[3930] = ObjectEffectInteger;
         _typesTypes[3987] = ObjectEffectCreature;
         _typesTypes[5489] = ObjectEffectLadder;
         _typesTypes[843] = ObjectEffectMinMax;
         _typesTypes[7031] = ObjectEffectDuration;
         _typesTypes[3424] = ObjectEffectString;
         _typesTypes[670] = ObjectEffectDice;
         _typesTypes[3435] = ObjectEffectDate;
         _typesTypes[3353] = ObjectEffectMount;
         _typesTypes[470] = UpdateMountCharacteristic;
         _typesTypes[2137] = UpdateMountBooleanCharacteristic;
         _typesTypes[5600] = UpdateMountIntegerCharacteristic;
         _typesTypes[5117] = Shortcut;
         _typesTypes[8861] = ShortcutObject;
         _typesTypes[1697] = ShortcutObjectPreset;
         _typesTypes[2079] = ShortcutObjectItem;
         _typesTypes[576] = ShortcutSpell;
         _typesTypes[4118] = ShortcutSmiley;
         _typesTypes[1189] = ShortcutEmote;
         _typesTypes[3288] = ShortcutEntitiesPreset;
         _typesTypes[6607] = AchievementAchieved;
         _typesTypes[9874] = AchievementAchievedRewardable;
         _typesTypes[2099] = IgnoredInformations;
         _typesTypes[941] = IgnoredOnlineInformations;
         _typesTypes[861] = FriendInformations;
         _typesTypes[9348] = FriendOnlineInformations;
         _typesTypes[1584] = AcquaintanceInformation;
         _typesTypes[251] = AcquaintanceOnlineInformation;
         _typesTypes[8260] = FriendSpouseInformations;
         _typesTypes[8676] = FriendSpouseOnlineInformations;
         _typesTypes[2087] = InteractiveElementSkill;
         _typesTypes[7880] = InteractiveElementNamedSkill;
         _typesTypes[6065] = InteractiveElement;
         _typesTypes[2952] = InteractiveElementWithAgeBonus;
         _typesTypes[9391] = PartyMemberInformations;
         _typesTypes[2056] = PartyMemberArenaInformations;
         _typesTypes[3577] = PartyInvitationMemberInformations;
         _typesTypes[5790] = PartyEntityBaseInformation;
         _typesTypes[118] = PartyEntityMemberInformation;
         _typesTypes[3573] = SkillActionDescription;
         _typesTypes[1078] = SkillActionDescriptionTimed;
         _typesTypes[5684] = SkillActionDescriptionCollect;
         _typesTypes[5905] = SkillActionDescriptionCraft;
         _typesTypes[2374] = HouseInformations;
         _typesTypes[8406] = AccountHouseInformations;
         _typesTypes[2801] = HouseInformationsInside;
         _typesTypes[409] = HouseInformationsForGuild;
         _typesTypes[5255] = HouseOnMapInformations;
         _typesTypes[3219] = HouseInstanceInformations;
         _typesTypes[4071] = HouseGuildedInformations;
         _typesTypes[5612] = PaddockBuyableInformations;
         _typesTypes[4294] = PaddockGuildedInformations;
         _typesTypes[3056] = GameContextActorPositionInformations;
         _typesTypes[9060] = GameContextActorInformations;
         _typesTypes[5601] = GameFightFighterInformations;
         _typesTypes[8061] = GameFightAIInformations;
         _typesTypes[1792] = GameFightMonsterInformations;
         _typesTypes[7656] = GameFightMonsterWithAlignmentInformations;
         _typesTypes[7175] = GameFightTaxCollectorInformations;
         _typesTypes[4176] = GameFightFighterNamedInformations;
         _typesTypes[3578] = GameFightCharacterInformations;
         _typesTypes[419] = GameFightMutantInformations;
         _typesTypes[4556] = GameFightEntityInformation;
         _typesTypes[8764] = GameRolePlayActorInformations;
         _typesTypes[2808] = GameRolePlayNamedActorInformations;
         _typesTypes[9318] = GameRolePlayHumanoidInformations;
         _typesTypes[2574] = GameRolePlayMutantInformations;
         _typesTypes[9304] = GameRolePlayCharacterInformations;
         _typesTypes[9212] = GameRolePlayMountInformations;
         _typesTypes[8347] = GameRolePlayNpcInformations;
         _typesTypes[7588] = GameRolePlayNpcWithQuestInformations;
         _typesTypes[7360] = GameRolePlayGroupMonsterInformations;
         _typesTypes[6822] = GameRolePlayGroupMonsterWaveInformations;
         _typesTypes[9279] = GameRolePlayTreasureHintInformations;
         _typesTypes[4101] = GameRolePlayTaxCollectorInformations;
         _typesTypes[7369] = GameRolePlayPrismInformations;
         _typesTypes[9999] = GameRolePlayPortalInformations;
         _typesTypes[9060] = GameContextActorInformations;
         _typesTypes[5601] = GameFightFighterInformations;
         _typesTypes[8061] = GameFightAIInformations;
         _typesTypes[1792] = GameFightMonsterInformations;
         _typesTypes[7656] = GameFightMonsterWithAlignmentInformations;
         _typesTypes[7175] = GameFightTaxCollectorInformations;
         _typesTypes[4176] = GameFightFighterNamedInformations;
         _typesTypes[3578] = GameFightCharacterInformations;
         _typesTypes[419] = GameFightMutantInformations;
         _typesTypes[4556] = GameFightEntityInformation;
         _typesTypes[8764] = GameRolePlayActorInformations;
         _typesTypes[2808] = GameRolePlayNamedActorInformations;
         _typesTypes[9318] = GameRolePlayHumanoidInformations;
         _typesTypes[2574] = GameRolePlayMutantInformations;
         _typesTypes[9304] = GameRolePlayCharacterInformations;
         _typesTypes[9212] = GameRolePlayMountInformations;
         _typesTypes[8347] = GameRolePlayNpcInformations;
         _typesTypes[7588] = GameRolePlayNpcWithQuestInformations;
         _typesTypes[7360] = GameRolePlayGroupMonsterInformations;
         _typesTypes[6822] = GameRolePlayGroupMonsterWaveInformations;
         _typesTypes[9279] = GameRolePlayTreasureHintInformations;
         _typesTypes[4101] = GameRolePlayTaxCollectorInformations;
         _typesTypes[7369] = GameRolePlayPrismInformations;
         _typesTypes[9999] = GameRolePlayPortalInformations;
         _typesTypes[8764] = GameRolePlayActorInformations;
         _typesTypes[2808] = GameRolePlayNamedActorInformations;
         _typesTypes[9318] = GameRolePlayHumanoidInformations;
         _typesTypes[2574] = GameRolePlayMutantInformations;
         _typesTypes[9304] = GameRolePlayCharacterInformations;
         _typesTypes[9212] = GameRolePlayMountInformations;
         _typesTypes[8347] = GameRolePlayNpcInformations;
         _typesTypes[7588] = GameRolePlayNpcWithQuestInformations;
         _typesTypes[7360] = GameRolePlayGroupMonsterInformations;
         _typesTypes[6822] = GameRolePlayGroupMonsterWaveInformations;
         _typesTypes[9279] = GameRolePlayTreasureHintInformations;
         _typesTypes[4101] = GameRolePlayTaxCollectorInformations;
         _typesTypes[7369] = GameRolePlayPrismInformations;
         _typesTypes[9999] = GameRolePlayPortalInformations;
         _typesTypes[495] = HumanInformations;
         _typesTypes[7701] = HumanOption;
         _typesTypes[446] = HumanOptionObjectUse;
         _typesTypes[7953] = HumanOptionAlliance;
         _typesTypes[1132] = HumanOptionGuild;
         _typesTypes[5782] = HumanOptionOrnament;
         _typesTypes[7646] = HumanOptionEmote;
         _typesTypes[2189] = HumanOptionTitle;
         _typesTypes[2036] = HumanOptionSkillUse;
         _typesTypes[4364] = HumanOptionSpeedMultiplier;
         _typesTypes[8287] = HumanOptionFollowers;
         _typesTypes[1672] = TaxCollectorStaticInformations;
         _typesTypes[4158] = TaxCollectorInformations;
         _typesTypes[1982] = TaxCollectorComplementaryInformations;
         _typesTypes[4183] = TaxCollectorLootInformations;
         _typesTypes[5931] = TaxCollectorWaitingForHelpInformations;
         _typesTypes[5953] = GroupMonsterStaticInformations;
         _typesTypes[4829] = GroupMonsterStaticInformationsWithAlternatives;
         _typesTypes[7048] = QuestActiveInformations;
         _typesTypes[7451] = QuestActiveDetailedInformations;
         _typesTypes[7248] = QuestObjectiveInformations;
         _typesTypes[8731] = QuestObjectiveInformationsWithCompletion;
         _typesTypes[339] = SpawnInformation;
         _typesTypes[5062] = BaseSpawnMonsterInformation;
         _typesTypes[8568] = SpawnScaledMonsterInformation;
         _typesTypes[571] = SpawnMonsterInformation;
         _typesTypes[3409] = SpawnCharacterInformation;
         _typesTypes[4847] = SpawnCompanionInformation;
         _typesTypes[1891] = GameContextBasicSpawnInformation;
         _typesTypes[5419] = GameContextSummonsInformation;
         _typesTypes[5601] = GameFightFighterInformations;
         _typesTypes[8061] = GameFightAIInformations;
         _typesTypes[1792] = GameFightMonsterInformations;
         _typesTypes[7656] = GameFightMonsterWithAlignmentInformations;
         _typesTypes[7175] = GameFightTaxCollectorInformations;
         _typesTypes[4176] = GameFightFighterNamedInformations;
         _typesTypes[3578] = GameFightCharacterInformations;
         _typesTypes[419] = GameFightMutantInformations;
         _typesTypes[4556] = GameFightEntityInformation;
         _typesTypes[4794] = GameFightFighterLightInformations;
         _typesTypes[3925] = GameFightFighterMonsterLightInformations;
         _typesTypes[5195] = GameFightFighterNamedLightInformations;
         _typesTypes[3310] = GameFightFighterTaxCollectorLightInformations;
         _typesTypes[3181] = GameFightFighterEntityLightInformation;
         _typesTypes[315] = MapCoordinates;
         _typesTypes[7010] = MapCoordinatesAndId;
         _typesTypes[1599] = MapCoordinatesExtended;
         _typesTypes[3628] = Preset;
         _typesTypes[5695] = PresetsContainerPreset;
         _typesTypes[2553] = IconNamedPreset;
         _typesTypes[7774] = SpellsPreset;
         _typesTypes[6253] = ForgettableSpellsPreset;
         _typesTypes[1993] = StatsPreset;
         _typesTypes[6250] = EntitiesPreset;
         _typesTypes[4653] = FullStatsPreset;
         _typesTypes[4783] = ItemsPreset;
         _typesTypes[8185] = TreasureHuntStep;
         _typesTypes[9275] = TreasureHuntStepFollowDirectionToPOI;
         _typesTypes[5858] = TreasureHuntStepDig;
         _typesTypes[9719] = TreasureHuntStepFight;
         _typesTypes[8809] = TreasureHuntStepFollowDirectionToHint;
         _typesTypes[9008] = TreasureHuntStepFollowDirection;
         _typesTypes[1300] = AbstractPlayerSearchInformation;
         _typesTypes[3389] = PlayerSearchTagInformation;
         _typesTypes[3022] = PlayerSearchCharacterNameInformation;
         _typesTypes[2396] = PortalInformation;
         _typesTypes[7507] = BreachBranch;
         _typesTypes[8307] = ExtendedBreachBranch;
         _typesTypes[4080] = ExtendedLockedBreachBranch;
         _typesTypes[8307] = ExtendedBreachBranch;
         _typesTypes[4080] = ExtendedLockedBreachBranch;
         _typesTypes[2273] = PlayerStatus;
         _typesTypes[8257] = PlayerStatusExtended;
         _typesTypes[9977] = ServerSessionConstant;
         _typesTypes[7359] = ServerSessionConstantString;
         _typesTypes[2867] = ServerSessionConstantInteger;
         _typesTypes[4175] = ServerSessionConstantLong;
         _typesTypes[1815] = StatisticData;
         _typesTypes[7834] = StatisticDataInt;
         _typesTypes[7901] = StatisticDataBoolean;
         _typesTypes[1762] = StatisticDataShort;
         _typesTypes[4102] = StatisticDataString;
         _typesTypes[4573] = StatisticDataByte;
         _typesTypes[8943] = DebtInformation;
         _typesTypes[2104] = KamaDebtInformation;
         _typesTypes[8590] = GuildLogbookEntryBasicInformation;
         _typesTypes[3270] = GuildRankActivity;
         _typesTypes[8680] = GuildPlayerRankUpdateActivity;
         _typesTypes[9067] = GuildLogbookChestActivity;
         _typesTypes[3398] = GuildLevelUpActivity;
         _typesTypes[3935] = GuildPaddockActivity;
         _typesTypes[2970] = GuildPlayerFlowActivity;
         _typesTypes[7681] = GuildUnlockNewTabActivity;
         _typesTypes[8655] = SurrenderResponse;
         _typesTypes[8906] = SurrenderRefused;
         _typesTypes[9548] = SurrenderRefusedBeforeTurn;
         _typesTypes[2726] = SurrenderRefusedBeforeVote;
         _typesTypes[8859] = SurrenderAccepted;
         _typesTypes[3674] = SurrenderVoteResponse;
         _typesTypes[1140] = SurrenderVoteRefused;
         _typesTypes[5188] = SurrenderVoteRefusedWaitBetweenVotes;
         _typesTypes[9709] = SurrenderVoteRefusedBeforeTurn;
         _typesTypes[8978] = SurrenderVoteRefusedAlreadyAsked;
         _typesTypes[8687] = SurrenderVoteAccepted;
      }
      
      public function ProtocolTypeManager()
      {
         super();
      }
      
      public static function getInstance(base:Class, typeId:uint) : *
      {
         var objType:Class = _typesTypes[typeId];
         if(!objType)
         {
            throw new Error("Type with id " + typeId + " is unknown.");
         }
         var obj:* = new objType();
         if(!(obj is base))
         {
            throw new Error("Type " + typeId + " is not a " + base + ".");
         }
         return obj;
      }
      
      public static function register() : void
      {
         StoreDataManager.getInstance().registerClass(new CharacterBaseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterHardcoreOrEpicInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeTargetInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new ChallengeTargetWithAttackerInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new EntityDispositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new IdentifiedEntityDispositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightEntityDispositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractSocialGroupInfos(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicAllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicNamedAllianceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactSheetInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new BasicGuildInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInsiderFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildInsiderFactSheetInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceFactSheetInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismGeolocalizedInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PrismInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AlliancePrismInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AllianceInsiderPrismInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCharacteristicDetailed(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterUsableCharacteristicDetailed(),true,true);
         StoreDataManager.getInstance().registerClass(new CharacterCharacteristicValue(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberWithAllianceCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamMemberEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTeamInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FightAllianceTeamInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacteristics(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultFighterListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultTaxCollectorListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultPlayerListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultMutantListEntry(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultAdditionalData(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultPvpData(),true,true);
         StoreDataManager.getInstance().registerClass(new FightResultExperienceData(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractFightDispellableEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporaryBoostEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporaryBoostStateEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporarySpellBoostEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightDetailedTemporaryBoostEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporaryBoostWeaponDamagesEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTemporarySpellImmunityEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new FightTriggeredEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffect(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectInteger(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectCreature(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectLadder(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectMinMax(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectDuration(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectString(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectDice(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectDate(),true,true);
         StoreDataManager.getInstance().registerClass(new ObjectEffectMount(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountBooleanCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new UpdateMountIntegerCharacteristic(),true,true);
         StoreDataManager.getInstance().registerClass(new Shortcut(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObject(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObjectPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutObjectItem(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutSpell(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutSmiley(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutEmote(),true,true);
         StoreDataManager.getInstance().registerClass(new ShortcutEntitiesPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementAchieved(),true,true);
         StoreDataManager.getInstance().registerClass(new AchievementAchievedRewardable(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new IgnoredOnlineInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendOnlineInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new AcquaintanceOnlineInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendSpouseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new FriendSpouseOnlineInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementSkill(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementNamedSkill(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElement(),true,true);
         StoreDataManager.getInstance().registerClass(new InteractiveElementWithAgeBonus(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyMemberArenaInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyInvitationMemberInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyEntityBaseInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PartyEntityMemberInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescription(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescriptionTimed(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescriptionCollect(),true,true);
         StoreDataManager.getInstance().registerClass(new SkillActionDescriptionCraft(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new AccountHouseInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInformationsInside(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInformationsForGuild(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseOnMapInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseInstanceInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HouseGuildedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockBuyableInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new PaddockGuildedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextActorPositionInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNamedActorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayHumanoidInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayMountInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayNpcWithQuestInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayGroupMonsterWaveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTreasureHintInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPrismInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameRolePlayPortalInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOption(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionObjectUse(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionAlliance(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionGuild(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionOrnament(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionEmote(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionTitle(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionSkillUse(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionSpeedMultiplier(),true,true);
         StoreDataManager.getInstance().registerClass(new HumanOptionFollowers(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorStaticInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorComplementaryInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorLootInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new TaxCollectorWaitingForHelpInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GroupMonsterStaticInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GroupMonsterStaticInformationsWithAlternatives(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestActiveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestActiveDetailedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestObjectiveInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new QuestObjectiveInformationsWithCompletion(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new BaseSpawnMonsterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnScaledMonsterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnMonsterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnCharacterInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new SpawnCompanionInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextBasicSpawnInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameContextSummonsInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightAIInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMonsterWithAlignmentInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightTaxCollectorInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightCharacterInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightMutantInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightEntityInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterMonsterLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterNamedLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterTaxCollectorLightInformations(),true,true);
         StoreDataManager.getInstance().registerClass(new GameFightFighterEntityLightInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new MapCoordinates(),true,true);
         StoreDataManager.getInstance().registerClass(new MapCoordinatesAndId(),true,true);
         StoreDataManager.getInstance().registerClass(new MapCoordinatesExtended(),true,true);
         StoreDataManager.getInstance().registerClass(new Preset(),true,true);
         StoreDataManager.getInstance().registerClass(new PresetsContainerPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new IconNamedPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new SpellsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ForgettableSpellsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new StatsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new EntitiesPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new FullStatsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new ItemsPreset(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStep(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirectionToPOI(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepDig(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFight(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirectionToHint(),true,true);
         StoreDataManager.getInstance().registerClass(new TreasureHuntStepFollowDirection(),true,true);
         StoreDataManager.getInstance().registerClass(new AbstractPlayerSearchInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerSearchTagInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerSearchCharacterNameInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new PortalInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new BreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedLockedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new ExtendedLockedBreachBranch(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatus(),true,true);
         StoreDataManager.getInstance().registerClass(new PlayerStatusExtended(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstant(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantString(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantInteger(),true,true);
         StoreDataManager.getInstance().registerClass(new ServerSessionConstantLong(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticData(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataInt(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataBoolean(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataShort(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataString(),true,true);
         StoreDataManager.getInstance().registerClass(new StatisticDataByte(),true,true);
         StoreDataManager.getInstance().registerClass(new DebtInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new KamaDebtInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLogbookEntryBasicInformation(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildRankActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerRankUpdateActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLogbookChestActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildLevelUpActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPaddockActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildPlayerFlowActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new GuildUnlockNewTabActivity(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderResponse(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderRefused(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderRefusedBeforeTurn(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderRefusedBeforeVote(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderAccepted(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderVoteResponse(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderVoteRefused(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderVoteRefusedWaitBetweenVotes(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderVoteRefusedBeforeTurn(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderVoteRefusedAlreadyAsked(),true,true);
         StoreDataManager.getInstance().registerClass(new SurrenderVoteAccepted(),true,true);
      }
   }
}
