# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Cytrus

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Fragment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Fragment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFragment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Fragment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Fragment
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fragment
    def Files(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Cytrus.File import File
            obj = File()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Fragment
    def FilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Fragment
    def FilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Fragment
    def Bundles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Cytrus.Bundle import Bundle
            obj = Bundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Fragment
    def BundlesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Fragment
    def BundlesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def FragmentStart(builder): builder.StartObject(3)
def Start(builder):
    return FragmentStart(builder)
def FragmentAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return FragmentAddName(builder, name)
def FragmentAddFiles(builder, files): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(files), 0)
def AddFiles(builder, files):
    return FragmentAddFiles(builder, files)
def FragmentStartFilesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartFilesVector(builder, numElems):
    return FragmentStartFilesVector(builder, numElems)
def FragmentAddBundles(builder, bundles): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bundles), 0)
def AddBundles(builder, bundles):
    return FragmentAddBundles(builder, bundles)
def FragmentStartBundlesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBundlesVector(builder, numElems):
    return FragmentStartBundlesVector(builder, numElems)
def FragmentEnd(builder): return builder.EndObject()
def End(builder):
    return FragmentEnd(builder)