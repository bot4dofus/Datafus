# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Cytrus

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class File(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = File()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # File
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # File
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # File
    def Hash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # File
    def HashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # File
    def HashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # File
    def HashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # File
    def Chunks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Cytrus.Chunk import Chunk
            obj = Chunk()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # File
    def ChunksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # File
    def ChunksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # File
    def Executable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # File
    def Symlink(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FileStart(builder): builder.StartObject(6)
def Start(builder):
    return FileStart(builder)
def FileAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return FileAddName(builder, name)
def FileAddSize(builder, size): builder.PrependInt64Slot(1, size, 0)
def AddSize(builder, size):
    return FileAddSize(builder, size)
def FileAddHash(builder, hash): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)
def AddHash(builder, hash):
    return FileAddHash(builder, hash)
def FileStartHashVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartHashVector(builder, numElems):
    return FileStartHashVector(builder, numElems)
def FileAddChunks(builder, chunks): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(chunks), 0)
def AddChunks(builder, chunks):
    return FileAddChunks(builder, chunks)
def FileStartChunksVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChunksVector(builder, numElems):
    return FileStartChunksVector(builder, numElems)
def FileAddExecutable(builder, executable): builder.PrependBoolSlot(4, executable, 0)
def AddExecutable(builder, executable):
    return FileAddExecutable(builder, executable)
def FileAddSymlink(builder, symlink): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(symlink), 0)
def AddSymlink(builder, symlink):
    return FileAddSymlink(builder, symlink)
def FileEnd(builder): return builder.EndObject()
def End(builder):
    return FileEnd(builder)