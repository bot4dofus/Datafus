# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Cytrus

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Chunk(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Chunk()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChunk(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Chunk
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Chunk
    def Hash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Chunk
    def HashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Chunk
    def HashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Chunk
    def HashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Chunk
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Chunk
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ChunkStart(builder): builder.StartObject(3)
def Start(builder):
    return ChunkStart(builder)
def ChunkAddHash(builder, hash): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)
def AddHash(builder, hash):
    return ChunkAddHash(builder, hash)
def ChunkStartHashVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartHashVector(builder, numElems):
    return ChunkStartHashVector(builder, numElems)
def ChunkAddSize(builder, size): builder.PrependInt64Slot(1, size, 0)
def AddSize(builder, size):
    return ChunkAddSize(builder, size)
def ChunkAddOffset(builder, offset): builder.PrependInt64Slot(2, offset, 0)
def AddOffset(builder, offset):
    return ChunkAddOffset(builder, offset)
def ChunkEnd(builder): return builder.EndObject()
def End(builder):
    return ChunkEnd(builder)