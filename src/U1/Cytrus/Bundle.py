# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Cytrus

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Bundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Bundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Bundle
    def Hash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Bundle
    def HashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Bundle
    def HashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Bundle
    def HashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Bundle
    def Chunks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Cytrus.Chunk import Chunk
            obj = Chunk()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bundle
    def ChunksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Bundle
    def ChunksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def BundleStart(builder): builder.StartObject(2)
def Start(builder):
    return BundleStart(builder)
def BundleAddHash(builder, hash): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)
def AddHash(builder, hash):
    return BundleAddHash(builder, hash)
def BundleStartHashVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartHashVector(builder, numElems):
    return BundleStartHashVector(builder, numElems)
def BundleAddChunks(builder, chunks): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(chunks), 0)
def AddChunks(builder, chunks):
    return BundleAddChunks(builder, chunks)
def BundleStartChunksVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartChunksVector(builder, numElems):
    return BundleStartChunksVector(builder, numElems)
def BundleEnd(builder): return builder.EndObject()
def End(builder):
    return BundleEnd(builder)